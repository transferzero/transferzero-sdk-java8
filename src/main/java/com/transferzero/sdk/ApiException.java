/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.List;

import okhttp3.Response;


public class ApiException extends Exception {
    private int code = 0;
    private Map<String, List<String>> responseHeaders = null;
    private Response response = null;
    private boolean validationError = false;
    private ApiClient apiClient = null;

    public ApiException() {}

    public ApiException(Throwable throwable) {
        super(throwable);
    }

    public ApiException(String message) {
        super(message);
    }

    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders, Response response) {
        super(message, throwable);
        this.code = code;
        this.responseHeaders = responseHeaders;
        this.response = response;
    }

    public ApiException(String message, int code, Map<String, List<String>> responseHeaders, Response response) {
        this(message, (Throwable) null, code, responseHeaders, response);
    }

    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders) {
        this(message, throwable, code, responseHeaders, null);
    }

    public ApiException(int code, Map<String, List<String>> responseHeaders, Response response) {
        this((String) null, (Throwable) null, code, responseHeaders, response);
    }

    public ApiException(int code, String message) {
        super(message);
        this.code = code;
    }

    public ApiException(int code, String message, Map<String, List<String>> responseHeaders, Response response) {
        this(code, message);
        this.responseHeaders = responseHeaders;
        this.response = response;
    }

    public ApiException(String message, int code, Map<String, List<String>> responseHeaders, Response response, boolean isValidationError, ApiClient apiClient) {
        this(message, code, responseHeaders, response);
        this.validationError = isValidationError;
        this.apiClient = apiClient;
    }

    /**
     * Get the HTTP status code.
     *
     * @return HTTP status code
     */
    public int getCode() {
        return code;
    }

    /**
     * Get the HTTP response headers.
     *
     * @return A map of list of string
     */
    public Map<String, List<String>> getResponseHeaders() {
        return responseHeaders;
    }

    /**
     * Get the HTTP response body.
     *
     * @return Response body in the form of string
     */
    public Response getResponse() {
        return response;
    }

    public boolean isValidationError() {
        return validationError;
    }

    public <T> T getResponseObject(Type returnType) throws ApiException {
        if (apiClient != null && isValidationError()) {
            return apiClient.deserialize(getResponse(), returnType);
        }
        return null;
    }
}
