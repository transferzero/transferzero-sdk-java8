/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.SenderListResponse;
import com.transferzero.sdk.model.SenderRequest;
import com.transferzero.sdk.model.SenderResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SendersApi {
    private ApiClient localVarApiClient;

    public SendersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SendersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteSender
     * @param senderID ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteSenderCall(UUID senderID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/senders/{Sender ID}"
            .replaceAll("\\{" + "Sender ID" + "\\}", localVarApiClient.escapeString(senderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSenderValidateBeforeCall(UUID senderID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'senderID' is set
        if (senderID == null) {
            throw new ApiException("Missing the required parameter 'senderID' when calling deleteSender(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSenderCall(senderID, _callback);
        return localVarCall;

    }

    /**
     * Deleting a sender
     * Deletes a single sender by the Sender ID
     * @param senderID ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @return SenderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SenderResponse deleteSender(UUID senderID) throws ApiException {
        ApiResponse<SenderResponse> localVarResp = deleteSenderWithHttpInfo(senderID);
        return localVarResp.getData();
    }

    /**
     * Deleting a sender
     * Deletes a single sender by the Sender ID
     * @param senderID ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @return ApiResponse&lt;SenderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SenderResponse> deleteSenderWithHttpInfo(UUID senderID) throws ApiException {
        okhttp3.Call localVarCall = deleteSenderValidateBeforeCall(senderID, null);
        Type localVarReturnType = new TypeToken<SenderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deleting a sender (asynchronously)
     * Deletes a single sender by the Sender ID
     * @param senderID ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteSenderAsync(UUID senderID, final ApiCallback<SenderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSenderValidateBeforeCall(senderID, _callback);
        Type localVarReturnType = new TypeToken<SenderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSender
     * @param senderID ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSenderCall(UUID senderID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/senders/{Sender ID}"
            .replaceAll("\\{" + "Sender ID" + "\\}", localVarApiClient.escapeString(senderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSenderValidateBeforeCall(UUID senderID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'senderID' is set
        if (senderID == null) {
            throw new ApiException("Missing the required parameter 'senderID' when calling getSender(Async)");
        }
        

        okhttp3.Call localVarCall = getSenderCall(senderID, _callback);
        return localVarCall;

    }

    /**
     * Fetching a sender
     * Returns a single sender by the Sender ID
     * @param senderID ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @return SenderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SenderResponse getSender(UUID senderID) throws ApiException {
        ApiResponse<SenderResponse> localVarResp = getSenderWithHttpInfo(senderID);
        return localVarResp.getData();
    }

    /**
     * Fetching a sender
     * Returns a single sender by the Sender ID
     * @param senderID ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @return ApiResponse&lt;SenderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SenderResponse> getSenderWithHttpInfo(UUID senderID) throws ApiException {
        okhttp3.Call localVarCall = getSenderValidateBeforeCall(senderID, null);
        Type localVarReturnType = new TypeToken<SenderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetching a sender (asynchronously)
     * Returns a single sender by the Sender ID
     * @param senderID ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSenderAsync(UUID senderID, final ApiCallback<SenderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSenderValidateBeforeCall(senderID, _callback);
        Type localVarReturnType = new TypeToken<SenderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSenders
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param createdAtFrom Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param createdAtTo End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param externalId Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSendersCall(Integer page, Integer per, String createdAtFrom, String createdAtTo, String externalId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/senders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (createdAtFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_from", createdAtFrom));
        }

        if (createdAtTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_to", createdAtTo));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSendersValidateBeforeCall(Integer page, Integer per, String createdAtFrom, String createdAtTo, String externalId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getSendersCall(page, per, createdAtFrom, createdAtTo, externalId, _callback);
        return localVarCall;

    }

    /**
     * Listing senders
     * Get a list of available senders
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param createdAtFrom Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param createdAtTo End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param externalId Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     * @return SenderListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SenderListResponse getSenders(Integer page, Integer per, String createdAtFrom, String createdAtTo, String externalId) throws ApiException {
        ApiResponse<SenderListResponse> localVarResp = getSendersWithHttpInfo(page, per, createdAtFrom, createdAtTo, externalId);
        return localVarResp.getData();
    }

    /**
     * Listing senders
     * Get a list of available senders
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param createdAtFrom Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param createdAtTo End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param externalId Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     * @return ApiResponse&lt;SenderListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SenderListResponse> getSendersWithHttpInfo(Integer page, Integer per, String createdAtFrom, String createdAtTo, String externalId) throws ApiException {
        okhttp3.Call localVarCall = getSendersValidateBeforeCall(page, per, createdAtFrom, createdAtTo, externalId, null);
        Type localVarReturnType = new TypeToken<SenderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing senders (asynchronously)
     * Get a list of available senders
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param createdAtFrom Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param createdAtTo End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)
     * @param externalId Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSendersAsync(Integer page, Integer per, String createdAtFrom, String createdAtTo, String externalId, final ApiCallback<SenderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSendersValidateBeforeCall(page, per, createdAtFrom, createdAtTo, externalId, _callback);
        Type localVarReturnType = new TypeToken<SenderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchSender
     * @param senderID ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param senderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call patchSenderCall(UUID senderID, SenderRequest senderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = senderRequest;

        // create path and map variables
        String localVarPath = "/senders/{Sender ID}"
            .replaceAll("\\{" + "Sender ID" + "\\}", localVarApiClient.escapeString(senderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchSenderValidateBeforeCall(UUID senderID, SenderRequest senderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'senderID' is set
        if (senderID == null) {
            throw new ApiException("Missing the required parameter 'senderID' when calling patchSender(Async)");
        }
        
        // verify the required parameter 'senderRequest' is set
        if (senderRequest == null) {
            throw new ApiException("Missing the required parameter 'senderRequest' when calling patchSender(Async)");
        }
        

        okhttp3.Call localVarCall = patchSenderCall(senderID, senderRequest, _callback);
        return localVarCall;

    }

    /**
     * Updating a sender
     * Updates the sender specified in the URL path.
     * @param senderID ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param senderRequest  (required)
     * @return SenderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SenderResponse patchSender(UUID senderID, SenderRequest senderRequest) throws ApiException {
        ApiResponse<SenderResponse> localVarResp = patchSenderWithHttpInfo(senderID, senderRequest);
        return localVarResp.getData();
    }

    /**
     * Updating a sender
     * Updates the sender specified in the URL path.
     * @param senderID ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param senderRequest  (required)
     * @return ApiResponse&lt;SenderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SenderResponse> patchSenderWithHttpInfo(UUID senderID, SenderRequest senderRequest) throws ApiException {
        okhttp3.Call localVarCall = patchSenderValidateBeforeCall(senderID, senderRequest, null);
        Type localVarReturnType = new TypeToken<SenderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updating a sender (asynchronously)
     * Updates the sender specified in the URL path.
     * @param senderID ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param senderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call patchSenderAsync(UUID senderID, SenderRequest senderRequest, final ApiCallback<SenderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchSenderValidateBeforeCall(senderID, senderRequest, _callback);
        Type localVarReturnType = new TypeToken<SenderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSenders
     * @param senderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call postSendersCall(SenderRequest senderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = senderRequest;

        // create path and map variables
        String localVarPath = "/senders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSendersValidateBeforeCall(SenderRequest senderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'senderRequest' is set
        if (senderRequest == null) {
            throw new ApiException("Missing the required parameter 'senderRequest' when calling postSenders(Async)");
        }
        

        okhttp3.Call localVarCall = postSendersCall(senderRequest, _callback);
        return localVarCall;

    }

    /**
     * Creating a sender
     * Creates a new sender in our system. 
     * @param senderRequest  (required)
     * @return SenderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SenderResponse postSenders(SenderRequest senderRequest) throws ApiException {
        ApiResponse<SenderResponse> localVarResp = postSendersWithHttpInfo(senderRequest);
        return localVarResp.getData();
    }

    /**
     * Creating a sender
     * Creates a new sender in our system. 
     * @param senderRequest  (required)
     * @return ApiResponse&lt;SenderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SenderResponse> postSendersWithHttpInfo(SenderRequest senderRequest) throws ApiException {
        okhttp3.Call localVarCall = postSendersValidateBeforeCall(senderRequest, null);
        Type localVarReturnType = new TypeToken<SenderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creating a sender (asynchronously)
     * Creates a new sender in our system. 
     * @param senderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call postSendersAsync(SenderRequest senderRequest, final ApiCallback<SenderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSendersValidateBeforeCall(senderRequest, _callback);
        Type localVarReturnType = new TypeToken<SenderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
