/*
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.PoliticallyExposedPerson;
import com.transferzero.sdk.model.PoliticallyExposedPersonListResponse;
import com.transferzero.sdk.model.PoliticallyExposedPersonResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoliticallyExposedPeopleApi {
    private ApiClient localVarApiClient;

    public PoliticallyExposedPeopleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PoliticallyExposedPeopleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePoliticallyExposedPerson
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deletePoliticallyExposedPersonCall(Integer politicallyExposedPersonID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}"
            .replaceAll("\\{" + "PoliticallyExposedPerson ID" + "\\}", localVarApiClient.escapeString(politicallyExposedPersonID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePoliticallyExposedPersonValidateBeforeCall(Integer politicallyExposedPersonID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'politicallyExposedPersonID' is set
        if (politicallyExposedPersonID == null) {
            throw new ApiException("Missing the required parameter 'politicallyExposedPersonID' when calling deletePoliticallyExposedPerson(Async)");
        }
        

        okhttp3.Call localVarCall = deletePoliticallyExposedPersonCall(politicallyExposedPersonID, _callback);
        return localVarCall;

    }

    /**
     * Deleting a politically exposed person
     * Deletes a single politically exposed person given the PEP ID.
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePoliticallyExposedPerson(Integer politicallyExposedPersonID) throws ApiException {
        deletePoliticallyExposedPersonWithHttpInfo(politicallyExposedPersonID);
    }

    /**
     * Deleting a politically exposed person
     * Deletes a single politically exposed person given the PEP ID.
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePoliticallyExposedPersonWithHttpInfo(Integer politicallyExposedPersonID) throws ApiException {
        okhttp3.Call localVarCall = deletePoliticallyExposedPersonValidateBeforeCall(politicallyExposedPersonID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deleting a politically exposed person (asynchronously)
     * Deletes a single politically exposed person given the PEP ID.
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deletePoliticallyExposedPersonAsync(Integer politicallyExposedPersonID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePoliticallyExposedPersonValidateBeforeCall(politicallyExposedPersonID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    private okhttp3.Call getPoliticallyExposedPeopleCall(UUID senderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/politically_exposed_people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (senderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_id", senderId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPoliticallyExposedPeopleValidateBeforeCall(UUID senderId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPoliticallyExposedPeopleCall(senderId, _callback);
        return localVarCall;

    }


    private ApiResponse<PoliticallyExposedPersonListResponse> getPoliticallyExposedPeopleWithHttpInfo(UUID senderId) throws ApiException {
        okhttp3.Call localVarCall = getPoliticallyExposedPeopleValidateBeforeCall(senderId, null);
        Type localVarReturnType = new TypeToken<PoliticallyExposedPersonListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPoliticallyExposedPeopleAsync(UUID senderId, final ApiCallback<PoliticallyExposedPersonListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPoliticallyExposedPeopleValidateBeforeCall(senderId, _callback);
        Type localVarReturnType = new TypeToken<PoliticallyExposedPersonListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPoliticallyExposedPeopleRequest {
        private UUID senderId;

        private APIgetPoliticallyExposedPeopleRequest() {
        }

        /**
         * Set senderId
         * @param senderId The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)
         * @return APIgetPoliticallyExposedPeopleRequest
         */
        public APIgetPoliticallyExposedPeopleRequest senderId(UUID senderId) {
            this.senderId = senderId;
            return this;
        }

        /**
         * Build call for getPoliticallyExposedPeople
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPoliticallyExposedPeopleCall(senderId, _callback);
        }

        /**
         * Execute getPoliticallyExposedPeople request
         * @return PoliticallyExposedPersonListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public PoliticallyExposedPersonListResponse execute() throws ApiException {
            ApiResponse<PoliticallyExposedPersonListResponse> localVarResp = getPoliticallyExposedPeopleWithHttpInfo(senderId);
            return localVarResp.getData();
        }

        /**
         * Execute getPoliticallyExposedPeople request with HTTP info returned
         * @return ApiResponse&lt;PoliticallyExposedPersonListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<PoliticallyExposedPersonListResponse> executeWithHttpInfo() throws ApiException {
            return getPoliticallyExposedPeopleWithHttpInfo(senderId);
        }

        /**
         * Execute getPoliticallyExposedPeople request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<PoliticallyExposedPersonListResponse> _callback) throws ApiException {
            return getPoliticallyExposedPeopleAsync(senderId, _callback);
        }
    }

    /**
     * Listing Politically Exposed People
     * Get a list of politically exposed people
     * @return APIgetPoliticallyExposedPeopleRequest
     */
    public APIgetPoliticallyExposedPeopleRequest getPoliticallyExposedPeople() {
        return new APIgetPoliticallyExposedPeopleRequest();
    }
    private okhttp3.Call getPoliticallyExposedPersonCall(Integer politicallyExposedPersonID, UUID senderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}"
            .replaceAll("\\{" + "PoliticallyExposedPerson ID" + "\\}", localVarApiClient.escapeString(politicallyExposedPersonID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (senderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_id", senderId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPoliticallyExposedPersonValidateBeforeCall(Integer politicallyExposedPersonID, UUID senderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'politicallyExposedPersonID' is set
        if (politicallyExposedPersonID == null) {
            throw new ApiException("Missing the required parameter 'politicallyExposedPersonID' when calling getPoliticallyExposedPerson(Async)");
        }
        

        okhttp3.Call localVarCall = getPoliticallyExposedPersonCall(politicallyExposedPersonID, senderId, _callback);
        return localVarCall;

    }


    private ApiResponse<PoliticallyExposedPersonResponse> getPoliticallyExposedPersonWithHttpInfo(Integer politicallyExposedPersonID, UUID senderId) throws ApiException {
        okhttp3.Call localVarCall = getPoliticallyExposedPersonValidateBeforeCall(politicallyExposedPersonID, senderId, null);
        Type localVarReturnType = new TypeToken<PoliticallyExposedPersonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPoliticallyExposedPersonAsync(Integer politicallyExposedPersonID, UUID senderId, final ApiCallback<PoliticallyExposedPersonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPoliticallyExposedPersonValidateBeforeCall(politicallyExposedPersonID, senderId, _callback);
        Type localVarReturnType = new TypeToken<PoliticallyExposedPersonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPoliticallyExposedPersonRequest {
        private final Integer politicallyExposedPersonID;
        private UUID senderId;

        private APIgetPoliticallyExposedPersonRequest(Integer politicallyExposedPersonID) {
            this.politicallyExposedPersonID = politicallyExposedPersonID;
        }

        /**
         * Set senderId
         * @param senderId The ID of the Sender to whom the politically exposed person is attached to. (optional)
         * @return APIgetPoliticallyExposedPersonRequest
         */
        public APIgetPoliticallyExposedPersonRequest senderId(UUID senderId) {
            this.senderId = senderId;
            return this;
        }

        /**
         * Build call for getPoliticallyExposedPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPoliticallyExposedPersonCall(politicallyExposedPersonID, senderId, _callback);
        }

        /**
         * Execute getPoliticallyExposedPerson request
         * @return PoliticallyExposedPersonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public PoliticallyExposedPersonResponse execute() throws ApiException {
            ApiResponse<PoliticallyExposedPersonResponse> localVarResp = getPoliticallyExposedPersonWithHttpInfo(politicallyExposedPersonID, senderId);
            return localVarResp.getData();
        }

        /**
         * Execute getPoliticallyExposedPerson request with HTTP info returned
         * @return ApiResponse&lt;PoliticallyExposedPersonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<PoliticallyExposedPersonResponse> executeWithHttpInfo() throws ApiException {
            return getPoliticallyExposedPersonWithHttpInfo(politicallyExposedPersonID, senderId);
        }

        /**
         * Execute getPoliticallyExposedPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<PoliticallyExposedPersonResponse> _callback) throws ApiException {
            return getPoliticallyExposedPersonAsync(politicallyExposedPersonID, senderId, _callback);
        }
    }

    /**
     * Fetching a politically exposed person
     * Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (required)
     * @return APIgetPoliticallyExposedPersonRequest
     */
    public APIgetPoliticallyExposedPersonRequest getPoliticallyExposedPerson(Integer politicallyExposedPersonID) {
        return new APIgetPoliticallyExposedPersonRequest(politicallyExposedPersonID);
    }
    /**
     * Build call for patchPoliticallyExposedPerson
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60; (required)
     * @param politicallyExposedPerson  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call patchPoliticallyExposedPersonCall(Integer politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = politicallyExposedPerson;

        // create path and map variables
        String localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}"
            .replaceAll("\\{" + "PoliticallyExposedPerson ID" + "\\}", localVarApiClient.escapeString(politicallyExposedPersonID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPoliticallyExposedPersonValidateBeforeCall(Integer politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'politicallyExposedPersonID' is set
        if (politicallyExposedPersonID == null) {
            throw new ApiException("Missing the required parameter 'politicallyExposedPersonID' when calling patchPoliticallyExposedPerson(Async)");
        }
        
        // verify the required parameter 'politicallyExposedPerson' is set
        if (politicallyExposedPerson == null) {
            throw new ApiException("Missing the required parameter 'politicallyExposedPerson' when calling patchPoliticallyExposedPerson(Async)");
        }
        

        okhttp3.Call localVarCall = patchPoliticallyExposedPersonCall(politicallyExposedPersonID, politicallyExposedPerson, _callback);
        return localVarCall;

    }

    /**
     * Updating a politically exposed person
     * Updates a single politically exposed person given the PEP ID.
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60; (required)
     * @param politicallyExposedPerson  (required)
     * @return PoliticallyExposedPersonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoliticallyExposedPersonResponse patchPoliticallyExposedPerson(Integer politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson) throws ApiException {
        ApiResponse<PoliticallyExposedPersonResponse> localVarResp = patchPoliticallyExposedPersonWithHttpInfo(politicallyExposedPersonID, politicallyExposedPerson);
        return localVarResp.getData();
    }

    /**
     * Updating a politically exposed person
     * Updates a single politically exposed person given the PEP ID.
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60; (required)
     * @param politicallyExposedPerson  (required)
     * @return ApiResponse&lt;PoliticallyExposedPersonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoliticallyExposedPersonResponse> patchPoliticallyExposedPersonWithHttpInfo(Integer politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson) throws ApiException {
        okhttp3.Call localVarCall = patchPoliticallyExposedPersonValidateBeforeCall(politicallyExposedPersonID, politicallyExposedPerson, null);
        Type localVarReturnType = new TypeToken<PoliticallyExposedPersonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updating a politically exposed person (asynchronously)
     * Updates a single politically exposed person given the PEP ID.
     * @param politicallyExposedPersonID The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60; (required)
     * @param politicallyExposedPerson  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call patchPoliticallyExposedPersonAsync(Integer politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson, final ApiCallback<PoliticallyExposedPersonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPoliticallyExposedPersonValidateBeforeCall(politicallyExposedPersonID, politicallyExposedPerson, _callback);
        Type localVarReturnType = new TypeToken<PoliticallyExposedPersonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPoliticallyExposedPeople
     * @param politicallyExposedPerson  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call postPoliticallyExposedPeopleCall(PoliticallyExposedPerson politicallyExposedPerson, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = politicallyExposedPerson;

        // create path and map variables
        String localVarPath = "/politically_exposed_people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPoliticallyExposedPeopleValidateBeforeCall(PoliticallyExposedPerson politicallyExposedPerson, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'politicallyExposedPerson' is set
        if (politicallyExposedPerson == null) {
            throw new ApiException("Missing the required parameter 'politicallyExposedPerson' when calling postPoliticallyExposedPeople(Async)");
        }
        

        okhttp3.Call localVarCall = postPoliticallyExposedPeopleCall(politicallyExposedPerson, _callback);
        return localVarCall;

    }

    /**
     * Creating a politically exposed person
     * Creates a new politically exposed person in our system. 
     * @param politicallyExposedPerson  (required)
     * @return PoliticallyExposedPersonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoliticallyExposedPersonResponse postPoliticallyExposedPeople(PoliticallyExposedPerson politicallyExposedPerson) throws ApiException {
        ApiResponse<PoliticallyExposedPersonResponse> localVarResp = postPoliticallyExposedPeopleWithHttpInfo(politicallyExposedPerson);
        return localVarResp.getData();
    }

    /**
     * Creating a politically exposed person
     * Creates a new politically exposed person in our system. 
     * @param politicallyExposedPerson  (required)
     * @return ApiResponse&lt;PoliticallyExposedPersonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoliticallyExposedPersonResponse> postPoliticallyExposedPeopleWithHttpInfo(PoliticallyExposedPerson politicallyExposedPerson) throws ApiException {
        okhttp3.Call localVarCall = postPoliticallyExposedPeopleValidateBeforeCall(politicallyExposedPerson, null);
        Type localVarReturnType = new TypeToken<PoliticallyExposedPersonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creating a politically exposed person (asynchronously)
     * Creates a new politically exposed person in our system. 
     * @param politicallyExposedPerson  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call postPoliticallyExposedPeopleAsync(PoliticallyExposedPerson politicallyExposedPerson, final ApiCallback<PoliticallyExposedPersonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPoliticallyExposedPeopleValidateBeforeCall(politicallyExposedPerson, _callback);
        Type localVarReturnType = new TypeToken<PoliticallyExposedPersonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
