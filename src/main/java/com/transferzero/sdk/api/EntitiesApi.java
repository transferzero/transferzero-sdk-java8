/*
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.EntityCreateRequest;
import com.transferzero.sdk.model.EntityCreateResponse;
import com.transferzero.sdk.model.EntityListResponse;
import com.transferzero.sdk.model.EntityUpdateRequest;
import com.transferzero.sdk.model.EntityUpdateResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntitiesApi {
    private ApiClient localVarApiClient;

    public EntitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call getEntitiesCall(String entityType, List<String> ids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/risk_assessment/entities/{Entity Type}/summary"
            .replaceAll("\\{" + "Entity Type" + "\\}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitiesValidateBeforeCall(String entityType, List<String> ids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getEntities(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getEntities(Async)");
        }
        

        okhttp3.Call localVarCall = getEntitiesCall(entityType, ids, _callback);
        return localVarCall;

    }


    private ApiResponse<EntityListResponse> getEntitiesWithHttpInfo(String entityType, List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = getEntitiesValidateBeforeCall(entityType, ids, null);
        Type localVarReturnType = new TypeToken<EntityListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntitiesAsync(String entityType, List<String> ids, final ApiCallback<EntityListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitiesValidateBeforeCall(entityType, ids, _callback);
        Type localVarReturnType = new TypeToken<EntityListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEntitiesRequest {
        private final String entityType;
        private final List<String> ids;

        private APIgetEntitiesRequest(String entityType, List<String> ids) {
            this.entityType = entityType;
            this.ids = ids;
        }

        /**
         * Build call for getEntities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntitiesCall(entityType, ids, _callback);
        }

        /**
         * Execute getEntities request
         * @return EntityListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public EntityListResponse execute() throws ApiException {
            ApiResponse<EntityListResponse> localVarResp = getEntitiesWithHttpInfo(entityType, ids);
            return localVarResp.getData();
        }

        /**
         * Execute getEntities request with HTTP info returned
         * @return ApiResponse&lt;EntityListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<EntityListResponse> executeWithHttpInfo() throws ApiException {
            return getEntitiesWithHttpInfo(entityType, ids);
        }

        /**
         * Execute getEntities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityListResponse> _callback) throws ApiException {
            return getEntitiesAsync(entityType, ids, _callback);
        }
    }

    /**
     * Listing entities
     * Get a list of entities
     * @param entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (required)
     * @param ids Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (required)
     * @return APIgetEntitiesRequest
     */
    public APIgetEntitiesRequest getEntities(String entityType, List<String> ids) {
        return new APIgetEntitiesRequest(entityType, ids);
    }
    private okhttp3.Call getEntitiesByParamsCall(String entityType, String rating, String state, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/risk_assessment/entities/{Entity Type}/search"
            .replaceAll("\\{" + "Entity Type" + "\\}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitiesByParamsValidateBeforeCall(String entityType, String rating, String state, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getEntitiesByParams(Async)");
        }
        

        okhttp3.Call localVarCall = getEntitiesByParamsCall(entityType, rating, state, _callback);
        return localVarCall;

    }


    private ApiResponse<EntityListResponse> getEntitiesByParamsWithHttpInfo(String entityType, String rating, String state) throws ApiException {
        okhttp3.Call localVarCall = getEntitiesByParamsValidateBeforeCall(entityType, rating, state, null);
        Type localVarReturnType = new TypeToken<EntityListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntitiesByParamsAsync(String entityType, String rating, String state, final ApiCallback<EntityListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitiesByParamsValidateBeforeCall(entityType, rating, state, _callback);
        Type localVarReturnType = new TypeToken<EntityListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEntitiesByParamsRequest {
        private final String entityType;
        private String rating;
        private String state;

        private APIgetEntitiesByParamsRequest(String entityType) {
            this.entityType = entityType;
        }

        /**
         * Set rating
         * @param rating Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)
         * @return APIgetEntitiesByParamsRequest
         */
        public APIgetEntitiesByParamsRequest rating(String rating) {
            this.rating = rating;
            return this;
        }

        /**
         * Set state
         * @param state Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)
         * @return APIgetEntitiesByParamsRequest
         */
        public APIgetEntitiesByParamsRequest state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Build call for getEntitiesByParams
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntitiesByParamsCall(entityType, rating, state, _callback);
        }

        /**
         * Execute getEntitiesByParams request
         * @return EntityListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public EntityListResponse execute() throws ApiException {
            ApiResponse<EntityListResponse> localVarResp = getEntitiesByParamsWithHttpInfo(entityType, rating, state);
            return localVarResp.getData();
        }

        /**
         * Execute getEntitiesByParams request with HTTP info returned
         * @return ApiResponse&lt;EntityListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<EntityListResponse> executeWithHttpInfo() throws ApiException {
            return getEntitiesByParamsWithHttpInfo(entityType, rating, state);
        }

        /**
         * Execute getEntitiesByParams request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityListResponse> _callback) throws ApiException {
            return getEntitiesByParamsAsync(entityType, rating, state, _callback);
        }
    }

    /**
     * Listing entities by params (rating and/or state)
     * Get a list of entities scoped by the requested params (rating and/or state)
     * @param entityType Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60; (required)
     * @return APIgetEntitiesByParamsRequest
     */
    public APIgetEntitiesByParamsRequest getEntitiesByParams(String entityType) {
        return new APIgetEntitiesByParamsRequest(entityType);
    }
    private okhttp3.Call getEntityCall(String entityType, UUID entityID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}"
            .replaceAll("\\{" + "Entity Type" + "\\}", localVarApiClient.escapeString(entityType.toString()))
            .replaceAll("\\{" + "Entity ID" + "\\}", localVarApiClient.escapeString(entityID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityValidateBeforeCall(String entityType, UUID entityID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getEntity(Async)");
        }
        
        // verify the required parameter 'entityID' is set
        if (entityID == null) {
            throw new ApiException("Missing the required parameter 'entityID' when calling getEntity(Async)");
        }
        

        okhttp3.Call localVarCall = getEntityCall(entityType, entityID, _callback);
        return localVarCall;

    }


    private ApiResponse<EntityCreateResponse> getEntityWithHttpInfo(String entityType, UUID entityID) throws ApiException {
        okhttp3.Call localVarCall = getEntityValidateBeforeCall(entityType, entityID, null);
        Type localVarReturnType = new TypeToken<EntityCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntityAsync(String entityType, UUID entityID, final ApiCallback<EntityCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityValidateBeforeCall(entityType, entityID, _callback);
        Type localVarReturnType = new TypeToken<EntityCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEntityRequest {
        private final String entityType;
        private final UUID entityID;

        private APIgetEntityRequest(String entityType, UUID entityID) {
            this.entityType = entityType;
            this.entityID = entityID;
        }

        /**
         * Build call for getEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntityCall(entityType, entityID, _callback);
        }

        /**
         * Execute getEntity request
         * @return EntityCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public EntityCreateResponse execute() throws ApiException {
            ApiResponse<EntityCreateResponse> localVarResp = getEntityWithHttpInfo(entityType, entityID);
            return localVarResp.getData();
        }

        /**
         * Execute getEntity request with HTTP info returned
         * @return ApiResponse&lt;EntityCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<EntityCreateResponse> executeWithHttpInfo() throws ApiException {
            return getEntityWithHttpInfo(entityType, entityID);
        }

        /**
         * Execute getEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityCreateResponse> _callback) throws ApiException {
            return getEntityAsync(entityType, entityID, _callback);
        }
    }

    /**
     * Fetching a entity
     * Returns a single entity by the Entity ID
     * @param entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @return APIgetEntityRequest
     */
    public APIgetEntityRequest getEntity(String entityType, UUID entityID) {
        return new APIgetEntityRequest(entityType, entityID);
    }
    /**
     * Build call for patchEntity
     * @param entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call patchEntityCall(String entityType, UUID entityID, EntityUpdateRequest entityUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = entityUpdateRequest;

        // create path and map variables
        String localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}"
            .replaceAll("\\{" + "Entity Type" + "\\}", localVarApiClient.escapeString(entityType.toString()))
            .replaceAll("\\{" + "Entity ID" + "\\}", localVarApiClient.escapeString(entityID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchEntityValidateBeforeCall(String entityType, UUID entityID, EntityUpdateRequest entityUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling patchEntity(Async)");
        }
        
        // verify the required parameter 'entityID' is set
        if (entityID == null) {
            throw new ApiException("Missing the required parameter 'entityID' when calling patchEntity(Async)");
        }
        
        // verify the required parameter 'entityUpdateRequest' is set
        if (entityUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'entityUpdateRequest' when calling patchEntity(Async)");
        }
        

        okhttp3.Call localVarCall = patchEntityCall(entityType, entityID, entityUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Updating an entity
     * Updates a single entity by the Entity ID
     * @param entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityUpdateRequest  (required)
     * @return EntityUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityUpdateResponse patchEntity(String entityType, UUID entityID, EntityUpdateRequest entityUpdateRequest) throws ApiException {
        ApiResponse<EntityUpdateResponse> localVarResp = patchEntityWithHttpInfo(entityType, entityID, entityUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Updating an entity
     * Updates a single entity by the Entity ID
     * @param entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityUpdateRequest  (required)
     * @return ApiResponse&lt;EntityUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityUpdateResponse> patchEntityWithHttpInfo(String entityType, UUID entityID, EntityUpdateRequest entityUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = patchEntityValidateBeforeCall(entityType, entityID, entityUpdateRequest, null);
        Type localVarReturnType = new TypeToken<EntityUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updating an entity (asynchronously)
     * Updates a single entity by the Entity ID
     * @param entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param entityUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call patchEntityAsync(String entityType, UUID entityID, EntityUpdateRequest entityUpdateRequest, final ApiCallback<EntityUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchEntityValidateBeforeCall(entityType, entityID, entityUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<EntityUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postEntity
     * @param entityType Type of entity to create. (required)
     * @param entityID ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60; (required)
     * @param entityCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call postEntityCall(String entityType, UUID entityID, EntityCreateRequest entityCreateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = entityCreateRequest;

        // create path and map variables
        String localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}"
            .replaceAll("\\{" + "Entity Type" + "\\}", localVarApiClient.escapeString(entityType.toString()))
            .replaceAll("\\{" + "Entity ID" + "\\}", localVarApiClient.escapeString(entityID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postEntityValidateBeforeCall(String entityType, UUID entityID, EntityCreateRequest entityCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling postEntity(Async)");
        }
        
        // verify the required parameter 'entityID' is set
        if (entityID == null) {
            throw new ApiException("Missing the required parameter 'entityID' when calling postEntity(Async)");
        }
        
        // verify the required parameter 'entityCreateRequest' is set
        if (entityCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'entityCreateRequest' when calling postEntity(Async)");
        }
        

        okhttp3.Call localVarCall = postEntityCall(entityType, entityID, entityCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Creating an entity
     * Creates a new entity. 
     * @param entityType Type of entity to create. (required)
     * @param entityID ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60; (required)
     * @param entityCreateRequest  (required)
     * @return EntityCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCreateResponse postEntity(String entityType, UUID entityID, EntityCreateRequest entityCreateRequest) throws ApiException {
        ApiResponse<EntityCreateResponse> localVarResp = postEntityWithHttpInfo(entityType, entityID, entityCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Creating an entity
     * Creates a new entity. 
     * @param entityType Type of entity to create. (required)
     * @param entityID ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60; (required)
     * @param entityCreateRequest  (required)
     * @return ApiResponse&lt;EntityCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCreateResponse> postEntityWithHttpInfo(String entityType, UUID entityID, EntityCreateRequest entityCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = postEntityValidateBeforeCall(entityType, entityID, entityCreateRequest, null);
        Type localVarReturnType = new TypeToken<EntityCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creating an entity (asynchronously)
     * Creates a new entity. 
     * @param entityType Type of entity to create. (required)
     * @param entityID ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60; (required)
     * @param entityCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call postEntityAsync(String entityType, UUID entityID, EntityCreateRequest entityCreateRequest, final ApiCallback<EntityCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postEntityValidateBeforeCall(entityType, entityID, entityCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<EntityCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
