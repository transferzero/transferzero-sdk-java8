/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import com.transferzero.sdk.model.WebhookDefinitionEventListResponse;
import com.transferzero.sdk.model.WebhookDefinitionListResponse;
import com.transferzero.sdk.model.WebhookDefinitionRequest;
import com.transferzero.sdk.model.WebhookDefinitionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteWebhook
     * @param webhookID The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteWebhookCall(String webhookID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/webhooks/{Webhook ID}"
            .replaceAll("\\{" + "Webhook ID" + "\\}", localVarApiClient.escapeString(webhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(String webhookID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhookID' is set
        if (webhookID == null) {
            throw new ApiException("Missing the required parameter 'webhookID' when calling deleteWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = deleteWebhookCall(webhookID, _callback);
        return localVarCall;

    }

    /**
     * Unsubscribing from a webhook
     * Unsubscribes from a webhook specified
     * @param webhookID The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60; (required)
     * @return WebhookDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookDefinitionResponse deleteWebhook(String webhookID) throws ApiException {
        ApiResponse<WebhookDefinitionResponse> localVarResp = deleteWebhookWithHttpInfo(webhookID);
        return localVarResp.getData();
    }

    /**
     * Unsubscribing from a webhook
     * Unsubscribes from a webhook specified
     * @param webhookID The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60; (required)
     * @return ApiResponse&lt;WebhookDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookDefinitionResponse> deleteWebhookWithHttpInfo(String webhookID) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(webhookID, null);
        Type localVarReturnType = new TypeToken<WebhookDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unsubscribing from a webhook (asynchronously)
     * Unsubscribes from a webhook specified
     * @param webhookID The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteWebhookAsync(String webhookID, final ApiCallback<WebhookDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(webhookID, _callback);
        Type localVarReturnType = new TypeToken<WebhookDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhook
     * @param webhookID The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getWebhookCall(UUID webhookID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/webhooks/{Webhook ID}"
            .replaceAll("\\{" + "Webhook ID" + "\\}", localVarApiClient.escapeString(webhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookValidateBeforeCall(UUID webhookID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhookID' is set
        if (webhookID == null) {
            throw new ApiException("Missing the required parameter 'webhookID' when calling getWebhook(Async)");
        }
        

        okhttp3.Call localVarCall = getWebhookCall(webhookID, _callback);
        return localVarCall;

    }

    /**
     * Find a webhook&#39;s details
     * Look up a webhook&#39;s details with its ID
     * @param webhookID The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60; (required)
     * @return WebhookDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookDefinitionResponse getWebhook(UUID webhookID) throws ApiException {
        ApiResponse<WebhookDefinitionResponse> localVarResp = getWebhookWithHttpInfo(webhookID);
        return localVarResp.getData();
    }

    /**
     * Find a webhook&#39;s details
     * Look up a webhook&#39;s details with its ID
     * @param webhookID The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60; (required)
     * @return ApiResponse&lt;WebhookDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookDefinitionResponse> getWebhookWithHttpInfo(UUID webhookID) throws ApiException {
        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(webhookID, null);
        Type localVarReturnType = new TypeToken<WebhookDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a webhook&#39;s details (asynchronously)
     * Look up a webhook&#39;s details with its ID
     * @param webhookID The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getWebhookAsync(UUID webhookID, final ApiCallback<WebhookDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(webhookID, _callback);
        Type localVarReturnType = new TypeToken<WebhookDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhookEvents
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getWebhookEventsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/webhooks/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookEventsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getWebhookEventsCall(_callback);
        return localVarCall;

    }

    /**
     * Find possible webhook events
     * Fetching possible webhook events
     * @return WebhookDefinitionEventListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookDefinitionEventListResponse getWebhookEvents() throws ApiException {
        ApiResponse<WebhookDefinitionEventListResponse> localVarResp = getWebhookEventsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Find possible webhook events
     * Fetching possible webhook events
     * @return ApiResponse&lt;WebhookDefinitionEventListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookDefinitionEventListResponse> getWebhookEventsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWebhookEventsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookDefinitionEventListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find possible webhook events (asynchronously)
     * Fetching possible webhook events
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getWebhookEventsAsync(final ApiCallback<WebhookDefinitionEventListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookEventsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookDefinitionEventListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhooks
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getWebhooksCall(Integer page, Integer per, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhooksValidateBeforeCall(Integer page, Integer per, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getWebhooksCall(page, per, _callback);
        return localVarCall;

    }

    /**
     * Listing webhooks
     * Get a list of created webhooks
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @return WebhookDefinitionListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookDefinitionListResponse getWebhooks(Integer page, Integer per) throws ApiException {
        ApiResponse<WebhookDefinitionListResponse> localVarResp = getWebhooksWithHttpInfo(page, per);
        return localVarResp.getData();
    }

    /**
     * Listing webhooks
     * Get a list of created webhooks
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @return ApiResponse&lt;WebhookDefinitionListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookDefinitionListResponse> getWebhooksWithHttpInfo(Integer page, Integer per) throws ApiException {
        okhttp3.Call localVarCall = getWebhooksValidateBeforeCall(page, per, null);
        Type localVarReturnType = new TypeToken<WebhookDefinitionListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing webhooks (asynchronously)
     * Get a list of created webhooks
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getWebhooksAsync(Integer page, Integer per, final ApiCallback<WebhookDefinitionListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhooksValidateBeforeCall(page, per, _callback);
        Type localVarReturnType = new TypeToken<WebhookDefinitionListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postWebhooks
     * @param webhookDefinitionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * More information about webhooks
     * @see <a href="https://github.com/transferzero/api-documentation#webhooks">Creating a webhook Documentation</a>
     */
    public okhttp3.Call postWebhooksCall(WebhookDefinitionRequest webhookDefinitionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhookDefinitionRequest;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWebhooksValidateBeforeCall(WebhookDefinitionRequest webhookDefinitionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhookDefinitionRequest' is set
        if (webhookDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'webhookDefinitionRequest' when calling postWebhooks(Async)");
        }
        

        okhttp3.Call localVarCall = postWebhooksCall(webhookDefinitionRequest, _callback);
        return localVarCall;

    }

    /**
     * Creating a webhook
     * Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
     * @param webhookDefinitionRequest  (required)
     * @return WebhookDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * More information about webhooks
     * @see <a href="https://github.com/transferzero/api-documentation#webhooks">Creating a webhook Documentation</a>
     */
    public WebhookDefinitionResponse postWebhooks(WebhookDefinitionRequest webhookDefinitionRequest) throws ApiException {
        ApiResponse<WebhookDefinitionResponse> localVarResp = postWebhooksWithHttpInfo(webhookDefinitionRequest);
        return localVarResp.getData();
    }

    /**
     * Creating a webhook
     * Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
     * @param webhookDefinitionRequest  (required)
     * @return ApiResponse&lt;WebhookDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * More information about webhooks
     * @see <a href="https://github.com/transferzero/api-documentation#webhooks">Creating a webhook Documentation</a>
     */
    public ApiResponse<WebhookDefinitionResponse> postWebhooksWithHttpInfo(WebhookDefinitionRequest webhookDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = postWebhooksValidateBeforeCall(webhookDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<WebhookDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creating a webhook (asynchronously)
     * Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
     * @param webhookDefinitionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * More information about webhooks
     * @see <a href="https://github.com/transferzero/api-documentation#webhooks">Creating a webhook Documentation</a>
     */
    public okhttp3.Call postWebhooksAsync(WebhookDefinitionRequest webhookDefinitionRequest, final ApiCallback<WebhookDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWebhooksValidateBeforeCall(webhookDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhookDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
