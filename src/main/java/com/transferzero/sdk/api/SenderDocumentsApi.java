/*
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.DocumentListResponse;
import com.transferzero.sdk.model.DocumentResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SenderDocumentsApi {
    private ApiClient localVarApiClient;

    public SenderDocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SenderDocumentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addDocumentSender
     * @param senderID ID of the sender to add the document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param documentID The ID of the document to be added to the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addDocumentSenderCall(UUID senderID, UUID documentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/senders/{Sender ID}/documents/{Document ID}/add"
            .replaceAll("\\{" + "Sender ID" + "\\}", localVarApiClient.escapeString(senderID.toString()))
            .replaceAll("\\{" + "Document ID" + "\\}", localVarApiClient.escapeString(documentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDocumentSenderValidateBeforeCall(UUID senderID, UUID documentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'senderID' is set
        if (senderID == null) {
            throw new ApiException("Missing the required parameter 'senderID' when calling addDocumentSender(Async)");
        }
        
        // verify the required parameter 'documentID' is set
        if (documentID == null) {
            throw new ApiException("Missing the required parameter 'documentID' when calling addDocumentSender(Async)");
        }
        

        okhttp3.Call localVarCall = addDocumentSenderCall(senderID, documentID, _callback);
        return localVarCall;

    }

    /**
     * Adding a document to a sender
     * Adds a new document to a sender 
     * @param senderID ID of the sender to add the document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param documentID The ID of the document to be added to the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse addDocumentSender(UUID senderID, UUID documentID) throws ApiException {
        ApiResponse<DocumentResponse> localVarResp = addDocumentSenderWithHttpInfo(senderID, documentID);
        return localVarResp.getData();
    }

    /**
     * Adding a document to a sender
     * Adds a new document to a sender 
     * @param senderID ID of the sender to add the document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param documentID The ID of the document to be added to the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> addDocumentSenderWithHttpInfo(UUID senderID, UUID documentID) throws ApiException {
        okhttp3.Call localVarCall = addDocumentSenderValidateBeforeCall(senderID, documentID, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adding a document to a sender (asynchronously)
     * Adds a new document to a sender 
     * @param senderID ID of the sender to add the document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param documentID The ID of the document to be added to the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addDocumentSenderAsync(UUID senderID, UUID documentID, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDocumentSenderValidateBeforeCall(senderID, documentID, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    private okhttp3.Call getSenderDocumentCall(UUID senderID, UUID documentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/senders/{Sender ID}/documents/{Document ID}"
            .replaceAll("\\{" + "Sender ID" + "\\}", localVarApiClient.escapeString(senderID.toString()))
            .replaceAll("\\{" + "Document ID" + "\\}", localVarApiClient.escapeString(documentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSenderDocumentValidateBeforeCall(UUID senderID, UUID documentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'senderID' is set
        if (senderID == null) {
            throw new ApiException("Missing the required parameter 'senderID' when calling getSenderDocument(Async)");
        }
        
        // verify the required parameter 'documentID' is set
        if (documentID == null) {
            throw new ApiException("Missing the required parameter 'documentID' when calling getSenderDocument(Async)");
        }
        

        okhttp3.Call localVarCall = getSenderDocumentCall(senderID, documentID, _callback);
        return localVarCall;

    }


    private ApiResponse<DocumentResponse> getSenderDocumentWithHttpInfo(UUID senderID, UUID documentID) throws ApiException {
        okhttp3.Call localVarCall = getSenderDocumentValidateBeforeCall(senderID, documentID, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSenderDocumentAsync(UUID senderID, UUID documentID, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSenderDocumentValidateBeforeCall(senderID, documentID, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSenderDocumentRequest {
        private final UUID senderID;
        private final UUID documentID;

        private APIgetSenderDocumentRequest(UUID senderID, UUID documentID) {
            this.senderID = senderID;
            this.documentID = documentID;
        }

        /**
         * Build call for getSenderDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSenderDocumentCall(senderID, documentID, _callback);
        }

        /**
         * Execute getSenderDocument request
         * @return DocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public DocumentResponse execute() throws ApiException {
            ApiResponse<DocumentResponse> localVarResp = getSenderDocumentWithHttpInfo(senderID, documentID);
            return localVarResp.getData();
        }

        /**
         * Execute getSenderDocument request with HTTP info returned
         * @return ApiResponse&lt;DocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<DocumentResponse> executeWithHttpInfo() throws ApiException {
            return getSenderDocumentWithHttpInfo(senderID, documentID);
        }

        /**
         * Execute getSenderDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentResponse> _callback) throws ApiException {
            return getSenderDocumentAsync(senderID, documentID, _callback);
        }
    }

    /**
     * Fetching a document belonging to a sender
     * Returns a single document belonging to a sender by the Document ID
     * @param senderID ID of the sender who owns the requested document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param documentID ID of the document to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @return APIgetSenderDocumentRequest
     */
    public APIgetSenderDocumentRequest getSenderDocument(UUID senderID, UUID documentID) {
        return new APIgetSenderDocumentRequest(senderID, documentID);
    }
    private okhttp3.Call getSenderDocumentsCall(UUID senderID, Integer page, Integer per, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/senders/{Sender ID}/documents"
            .replaceAll("\\{" + "Sender ID" + "\\}", localVarApiClient.escapeString(senderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSenderDocumentsValidateBeforeCall(UUID senderID, Integer page, Integer per, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'senderID' is set
        if (senderID == null) {
            throw new ApiException("Missing the required parameter 'senderID' when calling getSenderDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = getSenderDocumentsCall(senderID, page, per, _callback);
        return localVarCall;

    }


    private ApiResponse<DocumentListResponse> getSenderDocumentsWithHttpInfo(UUID senderID, Integer page, Integer per) throws ApiException {
        okhttp3.Call localVarCall = getSenderDocumentsValidateBeforeCall(senderID, page, per, null);
        Type localVarReturnType = new TypeToken<DocumentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSenderDocumentsAsync(UUID senderID, Integer page, Integer per, final ApiCallback<DocumentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSenderDocumentsValidateBeforeCall(senderID, page, per, _callback);
        Type localVarReturnType = new TypeToken<DocumentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSenderDocumentsRequest {
        private final UUID senderID;
        private Integer page;
        private Integer per;

        private APIgetSenderDocumentsRequest(UUID senderID) {
            this.senderID = senderID;
        }

        /**
         * Set page
         * @param page The page number to request (defaults to 1) (optional)
         * @return APIgetSenderDocumentsRequest
         */
        public APIgetSenderDocumentsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set per
         * @param per The number of results to load per page (defaults to 10) (optional)
         * @return APIgetSenderDocumentsRequest
         */
        public APIgetSenderDocumentsRequest per(Integer per) {
            this.per = per;
            return this;
        }

        /**
         * Build call for getSenderDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSenderDocumentsCall(senderID, page, per, _callback);
        }

        /**
         * Execute getSenderDocuments request
         * @return DocumentListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public DocumentListResponse execute() throws ApiException {
            ApiResponse<DocumentListResponse> localVarResp = getSenderDocumentsWithHttpInfo(senderID, page, per);
            return localVarResp.getData();
        }

        /**
         * Execute getSenderDocuments request with HTTP info returned
         * @return ApiResponse&lt;DocumentListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<DocumentListResponse> executeWithHttpInfo() throws ApiException {
            return getSenderDocumentsWithHttpInfo(senderID, page, per);
        }

        /**
         * Execute getSenderDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentListResponse> _callback) throws ApiException {
            return getSenderDocumentsAsync(senderID, page, per, _callback);
        }
    }

    /**
     * Getting a list of documents belonging to a sender
     * Fetches a list of documents belonging to a sender.
     * @param senderID ID of the sender who owns the requested documents.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents&#x60; (required)
     * @return APIgetSenderDocumentsRequest
     */
    public APIgetSenderDocumentsRequest getSenderDocuments(UUID senderID) {
        return new APIgetSenderDocumentsRequest(senderID);
    }
    /**
     * Build call for removeDocumentSender
     * @param senderID ID of the sender with the document to remove.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60; (required)
     * @param documentID The ID of the document to be removed from the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call removeDocumentSenderCall(UUID senderID, UUID documentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/senders/{Sender ID}/documents/{Document ID}/remove"
            .replaceAll("\\{" + "Sender ID" + "\\}", localVarApiClient.escapeString(senderID.toString()))
            .replaceAll("\\{" + "Document ID" + "\\}", localVarApiClient.escapeString(documentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDocumentSenderValidateBeforeCall(UUID senderID, UUID documentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'senderID' is set
        if (senderID == null) {
            throw new ApiException("Missing the required parameter 'senderID' when calling removeDocumentSender(Async)");
        }
        
        // verify the required parameter 'documentID' is set
        if (documentID == null) {
            throw new ApiException("Missing the required parameter 'documentID' when calling removeDocumentSender(Async)");
        }
        

        okhttp3.Call localVarCall = removeDocumentSenderCall(senderID, documentID, _callback);
        return localVarCall;

    }

    /**
     * Removing a document from a sender
     * Removes a document from a sender 
     * @param senderID ID of the sender with the document to remove.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60; (required)
     * @param documentID The ID of the document to be removed from the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60; (required)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse removeDocumentSender(UUID senderID, UUID documentID) throws ApiException {
        ApiResponse<DocumentResponse> localVarResp = removeDocumentSenderWithHttpInfo(senderID, documentID);
        return localVarResp.getData();
    }

    /**
     * Removing a document from a sender
     * Removes a document from a sender 
     * @param senderID ID of the sender with the document to remove.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60; (required)
     * @param documentID The ID of the document to be removed from the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60; (required)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> removeDocumentSenderWithHttpInfo(UUID senderID, UUID documentID) throws ApiException {
        okhttp3.Call localVarCall = removeDocumentSenderValidateBeforeCall(senderID, documentID, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removing a document from a sender (asynchronously)
     * Removes a document from a sender 
     * @param senderID ID of the sender with the document to remove.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60; (required)
     * @param documentID The ID of the document to be removed from the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call removeDocumentSenderAsync(UUID senderID, UUID documentID, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDocumentSenderValidateBeforeCall(senderID, documentID, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
