/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.ErrorStatus;
import com.transferzero.sdk.model.PayinMethodRequest;
import com.transferzero.sdk.model.TransactionListResponse;
import com.transferzero.sdk.model.TransactionRequest;
import com.transferzero.sdk.model.TransactionResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for calculateTransactions
     * @param transactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call calculateTransactionsCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionRequest;

        // create path and map variables
        String localVarPath = "/transactions/calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateTransactionsValidateBeforeCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionRequest' is set
        if (transactionRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionRequest' when calling calculateTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = calculateTransactionsCall(transactionRequest, _callback);
        return localVarCall;

    }

    /**
     * Calculates transaction amounts for a transaction payload
     * Calculates the input, output and fee amounts for the recipients in a transaction payload
     * @param transactionRequest  (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse calculateTransactions(TransactionRequest transactionRequest) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = calculateTransactionsWithHttpInfo(transactionRequest);
        return localVarResp.getData();
    }

    /**
     * Calculates transaction amounts for a transaction payload
     * Calculates the input, output and fee amounts for the recipients in a transaction payload
     * @param transactionRequest  (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> calculateTransactionsWithHttpInfo(TransactionRequest transactionRequest) throws ApiException {
        okhttp3.Call localVarCall = calculateTransactionsValidateBeforeCall(transactionRequest, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculates transaction amounts for a transaction payload (asynchronously)
     * Calculates the input, output and fee amounts for the recipients in a transaction payload
     * @param transactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call calculateTransactionsAsync(TransactionRequest transactionRequest, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateTransactionsValidateBeforeCall(transactionRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransaction
     * @param transactionID ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTransactionCall(UUID transactionID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transactions/{Transaction ID}"
            .replaceAll("\\{" + "Transaction ID" + "\\}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionValidateBeforeCall(UUID transactionID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling getTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = getTransactionCall(transactionID, _callback);
        return localVarCall;

    }

    /**
     * Fetch a single transaction
     * Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
     * @param transactionID ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse getTransaction(UUID transactionID) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = getTransactionWithHttpInfo(transactionID);
        return localVarResp.getData();
    }

    /**
     * Fetch a single transaction
     * Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
     * @param transactionID ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> getTransactionWithHttpInfo(UUID transactionID) throws ApiException {
        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(transactionID, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a single transaction (asynchronously)
     * Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
     * @param transactionID ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTransactionAsync(UUID transactionID, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(transactionID, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactions
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param externalId Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTransactionsCall(Integer page, Integer per, String externalId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsValidateBeforeCall(Integer page, Integer per, String externalId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTransactionsCall(page, per, externalId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of transactions
     * Retrieves a paginated list of the Transactions created by your API key.
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param externalId Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     * @return TransactionListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionListResponse getTransactions(Integer page, Integer per, String externalId) throws ApiException {
        ApiResponse<TransactionListResponse> localVarResp = getTransactionsWithHttpInfo(page, per, externalId);
        return localVarResp.getData();
    }

    /**
     * Get a list of transactions
     * Retrieves a paginated list of the Transactions created by your API key.
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param externalId Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     * @return ApiResponse&lt;TransactionListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionListResponse> getTransactionsWithHttpInfo(Integer page, Integer per, String externalId) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(page, per, externalId, null);
        Type localVarReturnType = new TypeToken<TransactionListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of transactions (asynchronously)
     * Retrieves a paginated list of the Transactions created by your API key.
     * @param page The page number to request (defaults to 1) (optional)
     * @param per The number of results to load per page (defaults to 10) (optional)
     * @param externalId Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTransactionsAsync(Integer page, Integer per, String externalId, final ApiCallback<TransactionListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(page, per, externalId, _callback);
        Type localVarReturnType = new TypeToken<TransactionListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for payinTransaction
     * @param transactionID ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param payinMethodRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call payinTransactionCall(UUID transactionID, PayinMethodRequest payinMethodRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = payinMethodRequest;

        // create path and map variables
        String localVarPath = "/transactions/{Transaction ID}/payin"
            .replaceAll("\\{" + "Transaction ID" + "\\}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payinTransactionValidateBeforeCall(UUID transactionID, PayinMethodRequest payinMethodRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling payinTransaction(Async)");
        }
        
        // verify the required parameter 'payinMethodRequest' is set
        if (payinMethodRequest == null) {
            throw new ApiException("Missing the required parameter 'payinMethodRequest' when calling payinTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = payinTransactionCall(transactionID, payinMethodRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a fake payin for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
     * @param transactionID ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param payinMethodRequest  (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse payinTransaction(UUID transactionID, PayinMethodRequest payinMethodRequest) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = payinTransactionWithHttpInfo(transactionID, payinMethodRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a fake payin for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
     * @param transactionID ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param payinMethodRequest  (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> payinTransactionWithHttpInfo(UUID transactionID, PayinMethodRequest payinMethodRequest) throws ApiException {
        okhttp3.Call localVarCall = payinTransactionValidateBeforeCall(transactionID, payinMethodRequest, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a fake payin for transaction (asynchronously)
     * This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
     * @param transactionID ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60; (required)
     * @param payinMethodRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call payinTransactionAsync(UUID transactionID, PayinMethodRequest payinMethodRequest, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = payinTransactionValidateBeforeCall(transactionID, payinMethodRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for payoutTransaction
     * @param transactionID ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call payoutTransactionCall(UUID transactionID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transactions/{Transaction ID}/payout"
            .replaceAll("\\{" + "Transaction ID" + "\\}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payoutTransactionValidateBeforeCall(UUID transactionID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling payoutTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = payoutTransactionCall(transactionID, _callback);
        return localVarCall;

    }

    /**
     * Creates a fake payout for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
     * @param transactionID ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse payoutTransaction(UUID transactionID) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = payoutTransactionWithHttpInfo(transactionID);
        return localVarResp.getData();
    }

    /**
     * Creates a fake payout for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
     * @param transactionID ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> payoutTransactionWithHttpInfo(UUID transactionID) throws ApiException {
        okhttp3.Call localVarCall = payoutTransactionValidateBeforeCall(transactionID, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a fake payout for transaction (asynchronously)
     * This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
     * @param transactionID ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call payoutTransactionAsync(UUID transactionID, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = payoutTransactionValidateBeforeCall(transactionID, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTransactions
     * @param transactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * API Documentation - Create Transaction
     * @see <a href="https://github.com/transferzero/api-documentation/blob/master/transaction-flow.md">Creates a new transaction Documentation</a>
     */
    public okhttp3.Call postTransactionsCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionRequest;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTransactionsValidateBeforeCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionRequest' is set
        if (transactionRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionRequest' when calling postTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = postTransactionsCall(transactionRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a new transaction
     * Transactions are the main objects in the TransferZero API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
     * @param transactionRequest  (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * API Documentation - Create Transaction
     * @see <a href="https://github.com/transferzero/api-documentation/blob/master/transaction-flow.md">Creates a new transaction Documentation</a>
     */
    public TransactionResponse postTransactions(TransactionRequest transactionRequest) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = postTransactionsWithHttpInfo(transactionRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new transaction
     * Transactions are the main objects in the TransferZero API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
     * @param transactionRequest  (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * API Documentation - Create Transaction
     * @see <a href="https://github.com/transferzero/api-documentation/blob/master/transaction-flow.md">Creates a new transaction Documentation</a>
     */
    public ApiResponse<TransactionResponse> postTransactionsWithHttpInfo(TransactionRequest transactionRequest) throws ApiException {
        okhttp3.Call localVarCall = postTransactionsValidateBeforeCall(transactionRequest, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new transaction (asynchronously)
     * Transactions are the main objects in the TransferZero API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
     * @param transactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * API Documentation - Create Transaction
     * @see <a href="https://github.com/transferzero/api-documentation/blob/master/transaction-flow.md">Creates a new transaction Documentation</a>
     */
    public okhttp3.Call postTransactionsAsync(TransactionRequest transactionRequest, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTransactionsValidateBeforeCall(transactionRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateTransactions
     * @param transactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call validateTransactionsCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionRequest;

        // create path and map variables
        String localVarPath = "/transactions/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTransactionsValidateBeforeCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionRequest' is set
        if (transactionRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionRequest' when calling validateTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = validateTransactionsCall(transactionRequest, _callback);
        return localVarCall;

    }

    /**
     * Validates a transaction payload
     * Validates fields in a transaction payload and displays invalid or missing fields
     * @param transactionRequest  (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse validateTransactions(TransactionRequest transactionRequest) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = validateTransactionsWithHttpInfo(transactionRequest);
        return localVarResp.getData();
    }

    /**
     * Validates a transaction payload
     * Validates fields in a transaction payload and displays invalid or missing fields
     * @param transactionRequest  (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> validateTransactionsWithHttpInfo(TransactionRequest transactionRequest) throws ApiException {
        okhttp3.Call localVarCall = validateTransactionsValidateBeforeCall(transactionRequest, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validates a transaction payload (asynchronously)
     * Validates fields in a transaction payload and displays invalid or missing fields
     * @param transactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call validateTransactionsAsync(TransactionRequest transactionRequest, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTransactionsValidateBeforeCall(transactionRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
