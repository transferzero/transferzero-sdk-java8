/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.CurrencyExchangeListResponse;
import com.transferzero.sdk.model.CurrencyListResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrencyInfoApi {
    private ApiClient localVarApiClient;

    public CurrencyInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrencyInfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call infoCurrenciesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoCurrenciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = infoCurrenciesCall(_callback);
        return localVarCall;

    }


    private ApiResponse<CurrencyListResponse> infoCurrenciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = infoCurrenciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CurrencyListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoCurrenciesAsync(final ApiCallback<CurrencyListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoCurrenciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CurrencyListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIinfoCurrenciesRequest {

        private APIinfoCurrenciesRequest() {
        }

        /**
         * Build call for infoCurrencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the available currencies in the system </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCurrenciesCall(_callback);
        }

        /**
         * Execute infoCurrencies request
         * @return CurrencyListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the available currencies in the system </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public CurrencyListResponse execute() throws ApiException {
            ApiResponse<CurrencyListResponse> localVarResp = infoCurrenciesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute infoCurrencies request with HTTP info returned
         * @return ApiResponse&lt;CurrencyListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the available currencies in the system </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrencyListResponse> executeWithHttpInfo() throws ApiException {
            return infoCurrenciesWithHttpInfo();
        }

        /**
         * Execute infoCurrencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the available currencies in the system </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrencyListResponse> _callback) throws ApiException {
            return infoCurrenciesAsync(_callback);
        }
    }

    /**
     * Getting a list of possible requested currencies
     * Fetches a list of currencies available to use in other API requests. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier.
     * @return APIinfoCurrenciesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the available currencies in the system </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public APIinfoCurrenciesRequest infoCurrencies() {
        return new APIinfoCurrenciesRequest();
    }
    private okhttp3.Call infoCurrenciesInCall(UUID senderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/currencies/in";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (senderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_id", senderId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoCurrenciesInValidateBeforeCall(UUID senderId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = infoCurrenciesInCall(senderId, _callback);
        return localVarCall;

    }


    private ApiResponse<CurrencyExchangeListResponse> infoCurrenciesInWithHttpInfo(UUID senderId) throws ApiException {
        okhttp3.Call localVarCall = infoCurrenciesInValidateBeforeCall(senderId, null);
        Type localVarReturnType = new TypeToken<CurrencyExchangeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoCurrenciesInAsync(UUID senderId, final ApiCallback<CurrencyExchangeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoCurrenciesInValidateBeforeCall(senderId, _callback);
        Type localVarReturnType = new TypeToken<CurrencyExchangeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIinfoCurrenciesInRequest {
        private UUID senderId;

        private APIinfoCurrenciesInRequest() {
        }

        /**
         * Set senderId
         * @param senderId Allows the scoping of the results by &#x60;sender_id&#x60; (optional).  Example: &#x60;/v1/info/currencies/in?sender_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
         * @return APIinfoCurrenciesInRequest
         */
        public APIinfoCurrenciesInRequest senderId(UUID senderId) {
            this.senderId = senderId;
            return this;
        }

        /**
         * Build call for infoCurrenciesIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the potential input currencies with their exchange rates </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCurrenciesInCall(senderId, _callback);
        }

        /**
         * Execute infoCurrenciesIn request
         * @return CurrencyExchangeListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the potential input currencies with their exchange rates </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public CurrencyExchangeListResponse execute() throws ApiException {
            ApiResponse<CurrencyExchangeListResponse> localVarResp = infoCurrenciesInWithHttpInfo(senderId);
            return localVarResp.getData();
        }

        /**
         * Execute infoCurrenciesIn request with HTTP info returned
         * @return ApiResponse&lt;CurrencyExchangeListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the potential input currencies with their exchange rates </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrencyExchangeListResponse> executeWithHttpInfo() throws ApiException {
            return infoCurrenciesInWithHttpInfo(senderId);
        }

        /**
         * Execute infoCurrenciesIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the potential input currencies with their exchange rates </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrencyExchangeListResponse> _callback) throws ApiException {
            return infoCurrenciesInAsync(senderId, _callback);
        }
    }

    /**
     * Getting a list of possible input currencies
     * Fetches a list of currencies available to use as the input currency in other API requests. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier. Use this endpoint to determine the current exchange rate from a specific input currency to any output currency that&#39;s available. 
     * @return APIinfoCurrenciesInRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the potential input currencies with their exchange rates </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public APIinfoCurrenciesInRequest infoCurrenciesIn() {
        return new APIinfoCurrenciesInRequest();
    }
    private okhttp3.Call infoCurrenciesOutCall(UUID senderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/info/currencies/out";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (senderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_id", senderId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoCurrenciesOutValidateBeforeCall(UUID senderId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = infoCurrenciesOutCall(senderId, _callback);
        return localVarCall;

    }


    private ApiResponse<CurrencyExchangeListResponse> infoCurrenciesOutWithHttpInfo(UUID senderId) throws ApiException {
        okhttp3.Call localVarCall = infoCurrenciesOutValidateBeforeCall(senderId, null);
        Type localVarReturnType = new TypeToken<CurrencyExchangeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoCurrenciesOutAsync(UUID senderId, final ApiCallback<CurrencyExchangeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoCurrenciesOutValidateBeforeCall(senderId, _callback);
        Type localVarReturnType = new TypeToken<CurrencyExchangeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIinfoCurrenciesOutRequest {
        private UUID senderId;

        private APIinfoCurrenciesOutRequest() {
        }

        /**
         * Set senderId
         * @param senderId Allows the scoping of the results by &#x60;sender_id&#x60; (optional).  Example: &#x60;/v1/info/currencies/out?sender_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)
         * @return APIinfoCurrenciesOutRequest
         */
        public APIinfoCurrenciesOutRequest senderId(UUID senderId) {
            this.senderId = senderId;
            return this;
        }

        /**
         * Build call for infoCurrenciesOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the potential output currencies with their exchange rates </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCurrenciesOutCall(senderId, _callback);
        }

        /**
         * Execute infoCurrenciesOut request
         * @return CurrencyExchangeListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the potential output currencies with their exchange rates </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public CurrencyExchangeListResponse execute() throws ApiException {
            ApiResponse<CurrencyExchangeListResponse> localVarResp = infoCurrenciesOutWithHttpInfo(senderId);
            return localVarResp.getData();
        }

        /**
         * Execute infoCurrenciesOut request with HTTP info returned
         * @return ApiResponse&lt;CurrencyExchangeListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the potential output currencies with their exchange rates </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrencyExchangeListResponse> executeWithHttpInfo() throws ApiException {
            return infoCurrenciesOutWithHttpInfo(senderId);
        }

        /**
         * Execute infoCurrenciesOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the potential output currencies with their exchange rates </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrencyExchangeListResponse> _callback) throws ApiException {
            return infoCurrenciesOutAsync(senderId, _callback);
        }
    }

    /**
     * Getting a list of possible output currencies
     * Fetches a list of currencies available to use as the output currency and their exchange rates against the available input currencies. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier. 
     * @return APIinfoCurrenciesOutRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the potential output currencies with their exchange rates </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public APIinfoCurrenciesOutRequest infoCurrenciesOut() {
        return new APIinfoCurrenciesOutRequest();
    }
}
