/*
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.BankAccountDetailsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BankAccountDetailsApi {
    private ApiClient localVarApiClient;

    public BankAccountDetailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BankAccountDetailsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call getBankAccountDetailsCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/bank_account_details/{Currency}"
            .replaceAll("\\{" + "Currency" + "\\}", localVarApiClient.escapeString(currency.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankAccountDetailsValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getBankAccountDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getBankAccountDetailsCall(currency, _callback);
        return localVarCall;

    }


    private ApiResponse<BankAccountDetailsResponse> getBankAccountDetailsWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getBankAccountDetailsValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<BankAccountDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBankAccountDetailsAsync(String currency, final ApiCallback<BankAccountDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankAccountDetailsValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<BankAccountDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetBankAccountDetailsRequest {
        private final String currency;

        private APIgetBankAccountDetailsRequest(String currency) {
            this.currency = currency;
        }

        /**
         * Build call for getBankAccountDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankAccountDetailsCall(currency, _callback);
        }

        /**
         * Execute getBankAccountDetails request
         * @return BankAccountDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public BankAccountDetailsResponse execute() throws ApiException {
            ApiResponse<BankAccountDetailsResponse> localVarResp = getBankAccountDetailsWithHttpInfo(currency);
            return localVarResp.getData();
        }

        /**
         * Execute getBankAccountDetails request with HTTP info returned
         * @return ApiResponse&lt;BankAccountDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<BankAccountDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getBankAccountDetailsWithHttpInfo(currency);
        }

        /**
         * Execute getBankAccountDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<BankAccountDetailsResponse> _callback) throws ApiException {
            return getBankAccountDetailsAsync(currency, _callback);
        }
    }

    /**
     * Fetching bank account details
     * Returns single bank account details based on the currency
     * @param currency Currency of the required bank account details.  Example: &#x60;/v1/bank_account_details/NGN&#x60; (required)
     * @return APIgetBankAccountDetailsRequest
     */
    public APIgetBankAccountDetailsRequest getBankAccountDetails(String currency) {
        return new APIgetBankAccountDetailsRequest(currency);
    }
}
