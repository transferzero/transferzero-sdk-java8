/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.DebitListResponse;
import com.transferzero.sdk.model.DebitRequestWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountDebitsApi {
    private ApiClient localVarApiClient;

    public AccountDebitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountDebitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for postAccountsDebits
     * @param debitRequestWrapper  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Funding Transaction guide including alternative ways to fund transactions.
     * @see <a href="https://docs.transferzero.com/docs/transaction-flow/#funding-transactions">Creating an account debit Documentation</a>
     */
    public okhttp3.Call postAccountsDebitsCall(DebitRequestWrapper debitRequestWrapper, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = debitRequestWrapper;

        // create path and map variables
        String localVarPath = "/accounts/debits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAccountsDebitsValidateBeforeCall(DebitRequestWrapper debitRequestWrapper, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'debitRequestWrapper' is set
        if (debitRequestWrapper == null) {
            throw new ApiException("Missing the required parameter 'debitRequestWrapper' when calling postAccountsDebits(Async)");
        }
        

        okhttp3.Call localVarCall = postAccountsDebitsCall(debitRequestWrapper, _callback);
        return localVarCall;

    }

    /**
     * Creating an account debit
     * Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
     * @param debitRequestWrapper  (required)
     * @return DebitListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Funding Transaction guide including alternative ways to fund transactions.
     * @see <a href="https://docs.transferzero.com/docs/transaction-flow/#funding-transactions">Creating an account debit Documentation</a>
     */
    public DebitListResponse postAccountsDebits(DebitRequestWrapper debitRequestWrapper) throws ApiException {
        ApiResponse<DebitListResponse> localVarResp = postAccountsDebitsWithHttpInfo(debitRequestWrapper);
        return localVarResp.getData();
    }

    /**
     * Creating an account debit
     * Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
     * @param debitRequestWrapper  (required)
     * @return ApiResponse&lt;DebitListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Funding Transaction guide including alternative ways to fund transactions.
     * @see <a href="https://docs.transferzero.com/docs/transaction-flow/#funding-transactions">Creating an account debit Documentation</a>
     */
    public ApiResponse<DebitListResponse> postAccountsDebitsWithHttpInfo(DebitRequestWrapper debitRequestWrapper) throws ApiException {
        okhttp3.Call localVarCall = postAccountsDebitsValidateBeforeCall(debitRequestWrapper, null);
        Type localVarReturnType = new TypeToken<DebitListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creating an account debit (asynchronously)
     * Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
     * @param debitRequestWrapper  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Funding Transaction guide including alternative ways to fund transactions.
     * @see <a href="https://docs.transferzero.com/docs/transaction-flow/#funding-transactions">Creating an account debit Documentation</a>
     */
    public okhttp3.Call postAccountsDebitsAsync(DebitRequestWrapper debitRequestWrapper, final ApiCallback<DebitListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAccountsDebitsValidateBeforeCall(debitRequestWrapper, _callback);
        Type localVarReturnType = new TypeToken<DebitListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
