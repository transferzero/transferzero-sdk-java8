/*
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiCallback;
import com.transferzero.sdk.ApiClient;
import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.ApiResponse;
import com.transferzero.sdk.Configuration;
import com.transferzero.sdk.Pair;
import com.transferzero.sdk.ProgressRequestBody;
import com.transferzero.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.transferzero.sdk.model.DocumentResponse;
import com.transferzero.sdk.model.TransactionReqLimitsResponse;
import com.transferzero.sdk.model.TransactionReqListResponse;
import com.transferzero.sdk.model.TransactionReqRequest;
import com.transferzero.sdk.model.TransactionReqResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionRequestsApi {
    private ApiClient localVarApiClient;

    public TransactionRequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionRequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addDocumentTransactionRequest
     * @param transactionRequestID ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param documentId The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addDocumentTransactionRequestCall(UUID transactionRequestID, UUID documentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transaction_requests/{Transaction Request ID}/add_document"
            .replaceAll("\\{" + "Transaction Request ID" + "\\}", localVarApiClient.escapeString(transactionRequestID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDocumentTransactionRequestValidateBeforeCall(UUID transactionRequestID, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionRequestID' is set
        if (transactionRequestID == null) {
            throw new ApiException("Missing the required parameter 'transactionRequestID' when calling addDocumentTransactionRequest(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling addDocumentTransactionRequest(Async)");
        }
        

        okhttp3.Call localVarCall = addDocumentTransactionRequestCall(transactionRequestID, documentId, _callback);
        return localVarCall;

    }

    /**
     * Adding a document to a transaction request (deprecated)
     * Adds a new document to a transaction request 
     * @param transactionRequestID ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param documentId The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse addDocumentTransactionRequest(UUID transactionRequestID, UUID documentId) throws ApiException {
        ApiResponse<DocumentResponse> localVarResp = addDocumentTransactionRequestWithHttpInfo(transactionRequestID, documentId);
        return localVarResp.getData();
    }

    /**
     * Adding a document to a transaction request (deprecated)
     * Adds a new document to a transaction request 
     * @param transactionRequestID ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param documentId The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> addDocumentTransactionRequestWithHttpInfo(UUID transactionRequestID, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = addDocumentTransactionRequestValidateBeforeCall(transactionRequestID, documentId, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adding a document to a transaction request (deprecated) (asynchronously)
     * Adds a new document to a transaction request 
     * @param transactionRequestID ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param documentId The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addDocumentTransactionRequestAsync(UUID transactionRequestID, UUID documentId, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDocumentTransactionRequestValidateBeforeCall(transactionRequestID, documentId, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelTransactionRequest
     * @param transactionRequestID ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param reasonCancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call cancelTransactionRequestCall(UUID transactionRequestID, String reasonCancellation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transaction_requests/{Transaction Request ID}/cancel"
            .replaceAll("\\{" + "Transaction Request ID" + "\\}", localVarApiClient.escapeString(transactionRequestID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reasonCancellation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason_cancellation", reasonCancellation));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelTransactionRequestValidateBeforeCall(UUID transactionRequestID, String reasonCancellation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionRequestID' is set
        if (transactionRequestID == null) {
            throw new ApiException("Missing the required parameter 'transactionRequestID' when calling cancelTransactionRequest(Async)");
        }
        
        // verify the required parameter 'reasonCancellation' is set
        if (reasonCancellation == null) {
            throw new ApiException("Missing the required parameter 'reasonCancellation' when calling cancelTransactionRequest(Async)");
        }
        

        okhttp3.Call localVarCall = cancelTransactionRequestCall(transactionRequestID, reasonCancellation, _callback);
        return localVarCall;

    }

    /**
     * Cancelling a transaction request
     * Cancels a transaction request 
     * @param transactionRequestID ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param reasonCancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     * @return TransactionReqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionReqResponse cancelTransactionRequest(UUID transactionRequestID, String reasonCancellation) throws ApiException {
        ApiResponse<TransactionReqResponse> localVarResp = cancelTransactionRequestWithHttpInfo(transactionRequestID, reasonCancellation);
        return localVarResp.getData();
    }

    /**
     * Cancelling a transaction request
     * Cancels a transaction request 
     * @param transactionRequestID ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param reasonCancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     * @return ApiResponse&lt;TransactionReqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionReqResponse> cancelTransactionRequestWithHttpInfo(UUID transactionRequestID, String reasonCancellation) throws ApiException {
        okhttp3.Call localVarCall = cancelTransactionRequestValidateBeforeCall(transactionRequestID, reasonCancellation, null);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancelling a transaction request (asynchronously)
     * Cancels a transaction request 
     * @param transactionRequestID ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60; (required)
     * @param reasonCancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call cancelTransactionRequestAsync(UUID transactionRequestID, String reasonCancellation, final ApiCallback<TransactionReqResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelTransactionRequestValidateBeforeCall(transactionRequestID, reasonCancellation, _callback);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmTransactionRequest
     * @param transactionRequestID ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call confirmTransactionRequestCall(UUID transactionRequestID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transaction_requests/{Transaction Request ID}/confirm"
            .replaceAll("\\{" + "Transaction Request ID" + "\\}", localVarApiClient.escapeString(transactionRequestID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmTransactionRequestValidateBeforeCall(UUID transactionRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionRequestID' is set
        if (transactionRequestID == null) {
            throw new ApiException("Missing the required parameter 'transactionRequestID' when calling confirmTransactionRequest(Async)");
        }
        

        okhttp3.Call localVarCall = confirmTransactionRequestCall(transactionRequestID, _callback);
        return localVarCall;

    }

    /**
     * Confirming a transaction request
     * Confirms a new transaction request 
     * @param transactionRequestID ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     * @return TransactionReqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionReqResponse confirmTransactionRequest(UUID transactionRequestID) throws ApiException {
        ApiResponse<TransactionReqResponse> localVarResp = confirmTransactionRequestWithHttpInfo(transactionRequestID);
        return localVarResp.getData();
    }

    /**
     * Confirming a transaction request
     * Confirms a new transaction request 
     * @param transactionRequestID ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     * @return ApiResponse&lt;TransactionReqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionReqResponse> confirmTransactionRequestWithHttpInfo(UUID transactionRequestID) throws ApiException {
        okhttp3.Call localVarCall = confirmTransactionRequestValidateBeforeCall(transactionRequestID, null);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirming a transaction request (asynchronously)
     * Confirms a new transaction request 
     * @param transactionRequestID ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call confirmTransactionRequestAsync(UUID transactionRequestID, final ApiCallback<TransactionReqResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmTransactionRequestValidateBeforeCall(transactionRequestID, _callback);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    private okhttp3.Call getTransactionRequestCall(UUID transactionRequestID, Boolean versioned, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transaction_requests/{Transaction Request ID}"
            .replaceAll("\\{" + "Transaction Request ID" + "\\}", localVarApiClient.escapeString(transactionRequestID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (versioned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versioned", versioned));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionRequestValidateBeforeCall(UUID transactionRequestID, Boolean versioned, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionRequestID' is set
        if (transactionRequestID == null) {
            throw new ApiException("Missing the required parameter 'transactionRequestID' when calling getTransactionRequest(Async)");
        }
        

        okhttp3.Call localVarCall = getTransactionRequestCall(transactionRequestID, versioned, _callback);
        return localVarCall;

    }


    private ApiResponse<TransactionReqResponse> getTransactionRequestWithHttpInfo(UUID transactionRequestID, Boolean versioned) throws ApiException {
        okhttp3.Call localVarCall = getTransactionRequestValidateBeforeCall(transactionRequestID, versioned, null);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransactionRequestAsync(UUID transactionRequestID, Boolean versioned, final ApiCallback<TransactionReqResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionRequestValidateBeforeCall(transactionRequestID, versioned, _callback);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransactionRequestRequest {
        private final UUID transactionRequestID;
        private Boolean versioned;

        private APIgetTransactionRequestRequest(UUID transactionRequestID) {
            this.transactionRequestID = transactionRequestID;
        }

        /**
         * Set versioned
         * @param versioned If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)
         * @return APIgetTransactionRequestRequest
         */
        public APIgetTransactionRequestRequest versioned(Boolean versioned) {
            this.versioned = versioned;
            return this;
        }

        /**
         * Build call for getTransactionRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransactionRequestCall(transactionRequestID, versioned, _callback);
        }

        /**
         * Execute getTransactionRequest request
         * @return TransactionReqResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public TransactionReqResponse execute() throws ApiException {
            ApiResponse<TransactionReqResponse> localVarResp = getTransactionRequestWithHttpInfo(transactionRequestID, versioned);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionRequest request with HTTP info returned
         * @return ApiResponse&lt;TransactionReqResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<TransactionReqResponse> executeWithHttpInfo() throws ApiException {
            return getTransactionRequestWithHttpInfo(transactionRequestID, versioned);
        }

        /**
         * Execute getTransactionRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionReqResponse> _callback) throws ApiException {
            return getTransactionRequestAsync(transactionRequestID, versioned, _callback);
        }
    }

    /**
     * Fetching a transaction request
     * Returns a single transaction request by the Transaction Request ID
     * @param transactionRequestID ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60; (required)
     * @return APIgetTransactionRequestRequest
     */
    public APIgetTransactionRequestRequest getTransactionRequest(UUID transactionRequestID) {
        return new APIgetTransactionRequestRequest(transactionRequestID);
    }
    private okhttp3.Call getTransactionRequestsCall(Integer page, Integer per, List<String> state, List<String> currency, String createdAtFrom, String createdAtTo, String amountFrom, String amountTo, String senderId, Boolean versioned, List<String> tag, List<String> ids, List<String> included, List<String> excluded, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transaction_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (currency != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "currency", currency));
        }

        if (createdAtFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_from", createdAtFrom));
        }

        if (createdAtTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_to", createdAtTo));
        }

        if (amountFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount_from", amountFrom));
        }

        if (amountTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount_to", amountTo));
        }

        if (senderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_id", senderId));
        }

        if (versioned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versioned", versioned));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (included != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "included", included));
        }

        if (excluded != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excluded", excluded));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionRequestsValidateBeforeCall(Integer page, Integer per, List<String> state, List<String> currency, String createdAtFrom, String createdAtTo, String amountFrom, String amountTo, String senderId, Boolean versioned, List<String> tag, List<String> ids, List<String> included, List<String> excluded, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTransactionRequestsCall(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded, _callback);
        return localVarCall;

    }


    private ApiResponse<TransactionReqListResponse> getTransactionRequestsWithHttpInfo(Integer page, Integer per, List<String> state, List<String> currency, String createdAtFrom, String createdAtTo, String amountFrom, String amountTo, String senderId, Boolean versioned, List<String> tag, List<String> ids, List<String> included, List<String> excluded) throws ApiException {
        okhttp3.Call localVarCall = getTransactionRequestsValidateBeforeCall(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded, null);
        Type localVarReturnType = new TypeToken<TransactionReqListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransactionRequestsAsync(Integer page, Integer per, List<String> state, List<String> currency, String createdAtFrom, String createdAtTo, String amountFrom, String amountTo, String senderId, Boolean versioned, List<String> tag, List<String> ids, List<String> included, List<String> excluded, final ApiCallback<TransactionReqListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionRequestsValidateBeforeCall(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded, _callback);
        Type localVarReturnType = new TypeToken<TransactionReqListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransactionRequestsRequest {
        private Integer page;
        private Integer per;
        private List<String> state;
        private List<String> currency;
        private String createdAtFrom;
        private String createdAtTo;
        private String amountFrom;
        private String amountTo;
        private String senderId;
        private Boolean versioned;
        private List<String> tag;
        private List<String> ids;
        private List<String> included;
        private List<String> excluded;

        private APIgetTransactionRequestsRequest() {
        }

        /**
         * Set page
         * @param page The page number to request (defaults to 1) (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set per
         * @param per The number of results to load per page (defaults to 10) (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest per(Integer per) {
            this.per = per;
            return this;
        }

        /**
         * Set state
         * @param state Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest state(List<String> state) {
            this.state = state;
            return this;
        }

        /**
         * Set currency
         * @param currency Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest currency(List<String> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Set createdAtFrom
         * @param createdAtFrom Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest createdAtFrom(String createdAtFrom) {
            this.createdAtFrom = createdAtFrom;
            return this;
        }

        /**
         * Set createdAtTo
         * @param createdAtTo Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest createdAtTo(String createdAtTo) {
            this.createdAtTo = createdAtTo;
            return this;
        }

        /**
         * Set amountFrom
         * @param amountFrom Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest amountFrom(String amountFrom) {
            this.amountFrom = amountFrom;
            return this;
        }

        /**
         * Set amountTo
         * @param amountTo Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest amountTo(String amountTo) {
            this.amountTo = amountTo;
            return this;
        }

        /**
         * Set senderId
         * @param senderId Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest senderId(String senderId) {
            this.senderId = senderId;
            return this;
        }

        /**
         * Set versioned
         * @param versioned If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest versioned(Boolean versioned) {
            this.versioned = versioned;
            return this;
        }

        /**
         * Set tag
         * @param tag Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest tag(List<String> tag) {
            this.tag = tag;
            return this;
        }

        /**
         * Set ids
         * @param ids Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest ids(List<String> ids) {
            this.ids = ids;
            return this;
        }

        /**
         * Set included
         * @param included Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest included(List<String> included) {
            this.included = included;
            return this;
        }

        /**
         * Set excluded
         * @param excluded Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)
         * @return APIgetTransactionRequestsRequest
         */
        public APIgetTransactionRequestsRequest excluded(List<String> excluded) {
            this.excluded = excluded;
            return this;
        }

        /**
         * Build call for getTransactionRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransactionRequestsCall(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded, _callback);
        }

        /**
         * Execute getTransactionRequests request
         * @return TransactionReqListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public TransactionReqListResponse execute() throws ApiException {
            ApiResponse<TransactionReqListResponse> localVarResp = getTransactionRequestsWithHttpInfo(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionRequests request with HTTP info returned
         * @return ApiResponse&lt;TransactionReqListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<TransactionReqListResponse> executeWithHttpInfo() throws ApiException {
            return getTransactionRequestsWithHttpInfo(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded);
        }

        /**
         * Execute getTransactionRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionReqListResponse> _callback) throws ApiException {
            return getTransactionRequestsAsync(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded, _callback);
        }
    }

    /**
     * Listing transaction requests
     * Get a list of transaction requests
     * @return APIgetTransactionRequestsRequest
     */
    public APIgetTransactionRequestsRequest getTransactionRequests() {
        return new APIgetTransactionRequestsRequest();
    }
    /**
     * Build call for postTransactionRequest
     * @param transactionReqRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call postTransactionRequestCall(TransactionReqRequest transactionReqRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionReqRequest;

        // create path and map variables
        String localVarPath = "/transaction_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTransactionRequestValidateBeforeCall(TransactionReqRequest transactionReqRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionReqRequest' is set
        if (transactionReqRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionReqRequest' when calling postTransactionRequest(Async)");
        }
        

        okhttp3.Call localVarCall = postTransactionRequestCall(transactionReqRequest, _callback);
        return localVarCall;

    }

    /**
     * Creating a transaction request
     * Creates a new transaction request 
     * @param transactionReqRequest  (required)
     * @return TransactionReqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionReqResponse postTransactionRequest(TransactionReqRequest transactionReqRequest) throws ApiException {
        ApiResponse<TransactionReqResponse> localVarResp = postTransactionRequestWithHttpInfo(transactionReqRequest);
        return localVarResp.getData();
    }

    /**
     * Creating a transaction request
     * Creates a new transaction request 
     * @param transactionReqRequest  (required)
     * @return ApiResponse&lt;TransactionReqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionReqResponse> postTransactionRequestWithHttpInfo(TransactionReqRequest transactionReqRequest) throws ApiException {
        okhttp3.Call localVarCall = postTransactionRequestValidateBeforeCall(transactionReqRequest, null);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creating a transaction request (asynchronously)
     * Creates a new transaction request 
     * @param transactionReqRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call postTransactionRequestAsync(TransactionReqRequest transactionReqRequest, final ApiCallback<TransactionReqResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTransactionRequestValidateBeforeCall(transactionReqRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restfulAddDocumentTransactionRequest
     * @param transactionRequestID ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param documentID The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call restfulAddDocumentTransactionRequestCall(UUID transactionRequestID, UUID documentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transaction_requests/{Transaction Request ID}/documents/{Document ID}/add"
            .replaceAll("\\{" + "Transaction Request ID" + "\\}", localVarApiClient.escapeString(transactionRequestID.toString()))
            .replaceAll("\\{" + "Document ID" + "\\}", localVarApiClient.escapeString(documentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restfulAddDocumentTransactionRequestValidateBeforeCall(UUID transactionRequestID, UUID documentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionRequestID' is set
        if (transactionRequestID == null) {
            throw new ApiException("Missing the required parameter 'transactionRequestID' when calling restfulAddDocumentTransactionRequest(Async)");
        }
        
        // verify the required parameter 'documentID' is set
        if (documentID == null) {
            throw new ApiException("Missing the required parameter 'documentID' when calling restfulAddDocumentTransactionRequest(Async)");
        }
        

        okhttp3.Call localVarCall = restfulAddDocumentTransactionRequestCall(transactionRequestID, documentID, _callback);
        return localVarCall;

    }

    /**
     * Adding a document to a transaction request
     * Adds a new document to a transaction request 
     * @param transactionRequestID ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param documentID The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse restfulAddDocumentTransactionRequest(UUID transactionRequestID, UUID documentID) throws ApiException {
        ApiResponse<DocumentResponse> localVarResp = restfulAddDocumentTransactionRequestWithHttpInfo(transactionRequestID, documentID);
        return localVarResp.getData();
    }

    /**
     * Adding a document to a transaction request
     * Adds a new document to a transaction request 
     * @param transactionRequestID ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param documentID The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> restfulAddDocumentTransactionRequestWithHttpInfo(UUID transactionRequestID, UUID documentID) throws ApiException {
        okhttp3.Call localVarCall = restfulAddDocumentTransactionRequestValidateBeforeCall(transactionRequestID, documentID, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adding a document to a transaction request (asynchronously)
     * Adds a new document to a transaction request 
     * @param transactionRequestID ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param documentID The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call restfulAddDocumentTransactionRequestAsync(UUID transactionRequestID, UUID documentID, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restfulAddDocumentTransactionRequestValidateBeforeCall(transactionRequestID, documentID, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionRequestLimits
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call transactionRequestLimitsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/transaction_requests/limits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionRequestLimitsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = transactionRequestLimitsCall(_callback);
        return localVarCall;

    }

    /**
     * Specifies the limits for transaction requests
     * Specifies the minimum and maximum limits for transaction requests
     * @return TransactionReqLimitsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionReqLimitsResponse transactionRequestLimits() throws ApiException {
        ApiResponse<TransactionReqLimitsResponse> localVarResp = transactionRequestLimitsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Specifies the limits for transaction requests
     * Specifies the minimum and maximum limits for transaction requests
     * @return ApiResponse&lt;TransactionReqLimitsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionReqLimitsResponse> transactionRequestLimitsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = transactionRequestLimitsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TransactionReqLimitsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Specifies the limits for transaction requests (asynchronously)
     * Specifies the minimum and maximum limits for transaction requests
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call transactionRequestLimitsAsync(final ApiCallback<TransactionReqLimitsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionRequestLimitsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TransactionReqLimitsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateTransactionRequests
     * @param transactionReqRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call validateTransactionRequestsCall(TransactionReqRequest transactionReqRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionReqRequest;

        // create path and map variables
        String localVarPath = "/transaction_requests/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationKey", "AuthorizationNonce", "AuthorizationSecret", "AuthorizationSignature" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTransactionRequestsValidateBeforeCall(TransactionReqRequest transactionReqRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionReqRequest' is set
        if (transactionReqRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionReqRequest' when calling validateTransactionRequests(Async)");
        }
        

        okhttp3.Call localVarCall = validateTransactionRequestsCall(transactionReqRequest, _callback);
        return localVarCall;

    }

    /**
     * Validates a transaction request payload
     * Validates fields in a transaction request payload and displays invalid or missing fields
     * @param transactionReqRequest  (required)
     * @return TransactionReqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionReqResponse validateTransactionRequests(TransactionReqRequest transactionReqRequest) throws ApiException {
        ApiResponse<TransactionReqResponse> localVarResp = validateTransactionRequestsWithHttpInfo(transactionReqRequest);
        return localVarResp.getData();
    }

    /**
     * Validates a transaction request payload
     * Validates fields in a transaction request payload and displays invalid or missing fields
     * @param transactionReqRequest  (required)
     * @return ApiResponse&lt;TransactionReqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionReqResponse> validateTransactionRequestsWithHttpInfo(TransactionReqRequest transactionReqRequest) throws ApiException {
        okhttp3.Call localVarCall = validateTransactionRequestsValidateBeforeCall(transactionReqRequest, null);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validates a transaction request payload (asynchronously)
     * Validates fields in a transaction request payload and displays invalid or missing fields
     * @param transactionReqRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call validateTransactionRequestsAsync(TransactionReqRequest transactionReqRequest, final ApiCallback<TransactionReqResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTransactionRequestsValidateBeforeCall(transactionReqRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionReqResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
