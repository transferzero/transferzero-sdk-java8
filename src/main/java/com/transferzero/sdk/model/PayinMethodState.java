/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The state of the payin method, which can be one of the following:  * &#x60;incomplete&#x60;: Some fields need to be filled in in_details before we can initiate the collection request. * &#x60;initial&#x60;: All required fields in in_details are present and collection process with the sender will start. * &#x60;pending&#x60;: Collection process has been started, waiting for sender to send funds. * &#x60;success&#x60;: Collection succeeded and funds have been cleared. * &#x60;processing&#x60;: Collection succeeded but waiting for funds to fully clear. * &#x60;error&#x60;: Collection failed. No funds received from sender. You can update or retry the PayinMethod. * &#x60;mispaid&#x60;: Collection succeeded but sender sent the wrong amount. * &#x60;canceled&#x60;: The transaction has been canceled and we will refund the sender soon. * &#x60;refunded&#x60;: The sender has been refunded the amount they sent in. * &#x60;exception&#x60;: An exception happened during processing of the collection. Please contact support.
 */
@JsonAdapter(PayinMethodState.Adapter.class)
public enum PayinMethodState {
  
  INCOMPLETE("incomplete"),
  
  INITIAL("initial"),
  
  PENDING("pending"),
  
  SUCCESS("success"),
  
  PROCESSING("processing"),
  
  ERROR("error"),
  
  MISPAID("mispaid"),
  
  CANCELED("canceled"),
  
  REFUNDED("refunded"),
  
  EXCEPTION("exception");

  private String value;

  PayinMethodState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PayinMethodState fromValue(String value) {
    for (PayinMethodState b : PayinMethodState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PayinMethodState> {
    @Override
    public void write(final JsonWriter jsonWriter, final PayinMethodState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PayinMethodState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PayinMethodState.fromValue(value);
    }
  }
}

