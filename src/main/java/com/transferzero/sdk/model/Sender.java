/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.transferzero.sdk.model.Document;
import com.transferzero.sdk.model.PoliticallyExposedPerson;
import com.transferzero.sdk.model.SenderState;
import com.transferzero.sdk.model.ValidationErrorDescription;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * This contains the details of the sender. The first time a specific sender is used the full details should be provided. Once a sender is created and is used, the next time you MUST only send the ID of the sender. This is so we can match the same sender across multiple transactions for KYC and audit purposes.  Personal Sender Example: &#x60;&#x60;&#x60;json {   \&quot;country\&quot;: \&quot;UG\&quot;,   \&quot;phone_country\&quot;: \&quot;UG\&quot;,   \&quot;phone_number\&quot;: \&quot;752403639\&quot;,   \&quot;email\&quot;: \&quot;example@home.org\&quot;,   \&quot;first_name\&quot;: \&quot;Johnny\&quot;,   \&quot;last_name\&quot;: \&quot;English\&quot;,   \&quot;city\&quot;: \&quot;Kampala\&quot;,   \&quot;street\&quot;: \&quot;Unknown 17-3\&quot;,   \&quot;address_description\&quot;: \&quot;Description of address\&quot;,   \&quot;postal_code\&quot;: \&quot;798983\&quot;,   \&quot;birth_date\&quot;: \&quot;1900-12-31\&quot;,   \&quot;documents\&quot;: [ ],   \&quot;politically_exposed_people\&quot;: [ ],   \&quot;ip\&quot;: \&quot;127.0.0.1\&quot;,   \&quot;identification_number\&quot;: \&quot;AB123456\&quot;,   \&quot;identification_type\&quot;: \&quot;ID\&quot;,   \&quot;external_id\&quot;: \&quot;806ec63a-a5a7-43cc-9d75-1ee74fbcc026\&quot;,   \&quot;created_at\&quot;: \&quot;2018-06-09 15:13:40 UTC\&quot;,   \&quot;metadata\&quot;: { } } &#x60;&#x60;&#x60;  Business Sender Example:  &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;business\&quot;,   \&quot;country\&quot;: \&quot;UG\&quot;,   \&quot;phone_country\&quot;: \&quot;UG\&quot;,   \&quot;phone_number\&quot;: \&quot;752403639\&quot;,   \&quot;email\&quot;: \&quot;example@home.org\&quot;,   \&quot;name\&quot;: \&quot;MyCompany\&quot;,   \&quot;city\&quot;: \&quot;Kampala\&quot;,   \&quot;street\&quot;: \&quot;Unknown 17-3\&quot;,   \&quot;postal_code\&quot;: \&quot;798983\&quot;,   \&quot;address_description\&quot;: \&quot;Description of address\&quot;,   \&quot;documents\&quot;: [ ],   \&quot;politically_exposed_people\&quot;: [ ],   \&quot;ip\&quot;: \&quot;127.0.0.1\&quot;,   \&quot;identification_number\&quot;: \&quot;AB123456\&quot;,   \&quot;identification_type\&quot;: \&quot;ID\&quot;,   \&quot;external_id\&quot;: \&quot;806ec63a-a5a7-43cc-9d75-1ee74fbcc026\&quot;,   \&quot;metadata\&quot;: { } } &#x60;&#x60;&#x60;  [Sender in the API documentation](https://docs.transferzero.com/docs/transaction-flow/#sender)
 */
@ApiModel(description = "This contains the details of the sender. The first time a specific sender is used the full details should be provided. Once a sender is created and is used, the next time you MUST only send the ID of the sender. This is so we can match the same sender across multiple transactions for KYC and audit purposes.  Personal Sender Example: ```json {   \"country\": \"UG\",   \"phone_country\": \"UG\",   \"phone_number\": \"752403639\",   \"email\": \"example@home.org\",   \"first_name\": \"Johnny\",   \"last_name\": \"English\",   \"city\": \"Kampala\",   \"street\": \"Unknown 17-3\",   \"address_description\": \"Description of address\",   \"postal_code\": \"798983\",   \"birth_date\": \"1900-12-31\",   \"documents\": [ ],   \"politically_exposed_people\": [ ],   \"ip\": \"127.0.0.1\",   \"identification_number\": \"AB123456\",   \"identification_type\": \"ID\",   \"external_id\": \"806ec63a-a5a7-43cc-9d75-1ee74fbcc026\",   \"created_at\": \"2018-06-09 15:13:40 UTC\",   \"metadata\": { } } ```  Business Sender Example:  ```json {   \"type\": \"business\",   \"country\": \"UG\",   \"phone_country\": \"UG\",   \"phone_number\": \"752403639\",   \"email\": \"example@home.org\",   \"name\": \"MyCompany\",   \"city\": \"Kampala\",   \"street\": \"Unknown 17-3\",   \"postal_code\": \"798983\",   \"address_description\": \"Description of address\",   \"documents\": [ ],   \"politically_exposed_people\": [ ],   \"ip\": \"127.0.0.1\",   \"identification_number\": \"AB123456\",   \"identification_type\": \"ID\",   \"external_id\": \"806ec63a-a5a7-43cc-9d75-1ee74fbcc026\",   \"metadata\": { } } ```  [Sender in the API documentation](https://docs.transferzero.com/docs/transaction-flow/#sender)")

public class Sender {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * Type of sender to create - either person or business (defaults to person) 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PERSON("person"),
    
    BUSINESS("business");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private SenderState state;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_PHONE_COUNTRY = "phone_country";
  @SerializedName(SERIALIZED_NAME_PHONE_COUNTRY)
  private String phoneCountry;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_ADDRESS_DESCRIPTION = "address_description";
  @SerializedName(SERIALIZED_NAME_ADDRESS_DESCRIPTION)
  private String addressDescription;

  public static final String SERIALIZED_NAME_IDENTIFICATION_NUMBER = "identification_number";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_NUMBER)
  private String identificationNumber;

  /**
   * Document to be identified. The identification type can be one of the following:  - &#x60;DL&#x60;: Driving License - &#x60;PP&#x60;: International Passport - &#x60;ID&#x60;: National ID - &#x60;OT&#x60;: Other
   */
  @JsonAdapter(IdentificationTypeEnum.Adapter.class)
  public enum IdentificationTypeEnum {
    DL("DL"),
    
    PP("PP"),
    
    ID("ID"),
    
    OT("OT");

    private String value;

    IdentificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdentificationTypeEnum fromValue(String value) {
      for (IdentificationTypeEnum b : IdentificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdentificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdentificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdentificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IdentificationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IDENTIFICATION_TYPE = "identification_type";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_TYPE)
  private IdentificationTypeEnum identificationType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middle_name";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birth_date";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private LocalDate birthDate;

  public static final String SERIALIZED_NAME_OCCUPATION = "occupation";
  @SerializedName(SERIALIZED_NAME_OCCUPATION)
  private String occupation;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  /**
   * Legal entity type (used only with a Business sender)
   */
  @JsonAdapter(LegalEntityTypeEnum.Adapter.class)
  public enum LegalEntityTypeEnum {
    SOLE_PROPRIETORSHIP("sole_proprietorship"),
    
    PARTNERSHIP("partnership"),
    
    PRIVATELY_OWNED_COMPANY("privately_owned_company"),
    
    PUBLICLY_OWNED_COMPANY("publicly_owned_company"),
    
    GOVERNMENT_OWNED_ENTITY("government_owned_entity"),
    
    TRUST("trust"),
    
    NGO("ngo"),
    
    CLUB_AND_SOCIETY("club_and_society"),
    
    GO("go"),
    
    OTHER("other"),
    
    FINANCIAL_INSTITUTION("financial_institution");

    private String value;

    LegalEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalEntityTypeEnum fromValue(String value) {
      for (LegalEntityTypeEnum b : LegalEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LegalEntityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_TYPE = "legal_entity_type";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_TYPE)
  private LegalEntityTypeEnum legalEntityType;

  public static final String SERIALIZED_NAME_REGISTRATION_DATE = "registration_date";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DATE)
  private String registrationDate;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registration_number";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_NATURE_OF_BUSINESS = "nature_of_business";
  @SerializedName(SERIALIZED_NAME_NATURE_OF_BUSINESS)
  private String natureOfBusiness;

  public static final String SERIALIZED_NAME_SOURCE_OF_FUNDS = "source_of_funds";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_FUNDS)
  private String sourceOfFunds;

  public static final String SERIALIZED_NAME_CORE_BUSINESS_ACTIVITIES = "core_business_activities";
  @SerializedName(SERIALIZED_NAME_CORE_BUSINESS_ACTIVITIES)
  private String coreBusinessActivities;

  public static final String SERIALIZED_NAME_PURPOSE_OF_OPENING_ACCOUNT = "purpose_of_opening_account";
  @SerializedName(SERIALIZED_NAME_PURPOSE_OF_OPENING_ACCOUNT)
  private String purposeOfOpeningAccount;

  public static final String SERIALIZED_NAME_OFFICE_PHONE = "office_phone";
  @SerializedName(SERIALIZED_NAME_OFFICE_PHONE)
  private String officePhone;

  public static final String SERIALIZED_NAME_VAT_REGISTRATION_NUMBER = "vat_registration_number";
  @SerializedName(SERIALIZED_NAME_VAT_REGISTRATION_NUMBER)
  private String vatRegistrationNumber;

  public static final String SERIALIZED_NAME_FINANCIAL_REGULATOR = "financial_regulator";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_REGULATOR)
  private String financialRegulator;

  public static final String SERIALIZED_NAME_REGULATORY_LICENCE_NUMBER = "regulatory_licence_number";
  @SerializedName(SERIALIZED_NAME_REGULATORY_LICENCE_NUMBER)
  private String regulatoryLicenceNumber;

  public static final String SERIALIZED_NAME_CONTACT_PERSON_EMAIL = "contact_person_email";
  @SerializedName(SERIALIZED_NAME_CONTACT_PERSON_EMAIL)
  private String contactPersonEmail;

  public static final String SERIALIZED_NAME_TRADING_COUNTRY = "trading_country";
  @SerializedName(SERIALIZED_NAME_TRADING_COUNTRY)
  private String tradingCountry;

  public static final String SERIALIZED_NAME_TRADING_ADDRESS = "trading_address";
  @SerializedName(SERIALIZED_NAME_TRADING_ADDRESS)
  private String tradingAddress;

  public static final String SERIALIZED_NAME_NUMBER_MONTHLY_TRANSACTIONS = "number_monthly_transactions";
  @SerializedName(SERIALIZED_NAME_NUMBER_MONTHLY_TRANSACTIONS)
  private String numberMonthlyTransactions;

  public static final String SERIALIZED_NAME_AMOUNT_MONTHLY_TRANSACTIONS = "amount_monthly_transactions";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONTHLY_TRANSACTIONS)
  private String amountMonthlyTransactions;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<Document> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata = null;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Map<String, List<ValidationErrorDescription>> errors = new HashMap<>();

  public static final String SERIALIZED_NAME_ONBOARDING_STATUS = "onboarding_status";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_STATUS)
  private String onboardingStatus;

  public static final String SERIALIZED_NAME_POLITICALLY_EXPOSED_PEOPLE = "politically_exposed_people";
  @SerializedName(SERIALIZED_NAME_POLITICALLY_EXPOSED_PEOPLE)
  private List<PoliticallyExposedPerson> politicallyExposedPeople = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public Sender id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "bf9ff782-e182-45ac-abea-5bce83ad6670", value = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public Sender type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of sender to create - either person or business (defaults to person) 
   * @return type
  **/
  @ApiModelProperty(example = "person", value = "Type of sender to create - either person or business (defaults to person) ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Sender state(SenderState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public SenderState getState() {
    return state;
  }

  public void setState(SenderState state) {
    this.state = state;
  }

  public Sender country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Country of sender in 2-character alpha ISO 3166-2 country format
   * @return country
  **/
  @ApiModelProperty(example = "NG", required = true, value = "Country of sender in 2-character alpha ISO 3166-2 country format")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public Sender street(String street) {
    this.street = street;
    return this;
  }

   /**
   * Sender&#39;s street
   * @return street
  **/
  @ApiModelProperty(example = "Fake Street", required = true, value = "Sender's street")
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }

  public Sender postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Zip code of sender
   * @return postalCode
  **/
  @ApiModelProperty(example = "798983", required = true, value = "Zip code of sender")
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public Sender city(String city) {
    this.city = city;
    return this;
  }

   /**
   * Sender&#39;s city
   * @return city
  **/
  @ApiModelProperty(example = "Kampala", required = true, value = "Sender's city")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public Sender phoneCountry(String phoneCountry) {
    this.phoneCountry = phoneCountry;
    return this;
  }

   /**
   * Phone country of sender in 2-character alpha ISO 3166-2 country format
   * @return phoneCountry
  **/
  @ApiModelProperty(example = "NG", required = true, value = "Phone country of sender in 2-character alpha ISO 3166-2 country format")
  public String getPhoneCountry() {
    return phoneCountry;
  }

  public void setPhoneCountry(String phoneCountry) {
    this.phoneCountry = phoneCountry;
  }

  public Sender phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Phone number of sender (without country callcode)
   * @return phoneNumber
  **/
  @ApiModelProperty(example = "752403639", value = "Phone number of sender (without country callcode)")
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public Sender email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Email of sender
   * @return email
  **/
  @ApiModelProperty(example = "example@home.org", required = true, value = "Email of sender")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public Sender ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * IP of sender
   * @return ip
  **/
  @ApiModelProperty(example = "127.0.0.1", required = true, value = "IP of sender")
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }

  public Sender addressDescription(String addressDescription) {
    this.addressDescription = addressDescription;
    return this;
  }

   /**
   * Description of address
   * @return addressDescription
  **/
  @ApiModelProperty(value = "Description of address")
  public String getAddressDescription() {
    return addressDescription;
  }

  public void setAddressDescription(String addressDescription) {
    this.addressDescription = addressDescription;
  }

  public Sender identificationNumber(String identificationNumber) {
    this.identificationNumber = identificationNumber;
    return this;
  }

   /**
   * Identification number of document used
   * @return identificationNumber
  **/
  @ApiModelProperty(example = "AB123456", value = "Identification number of document used")
  public String getIdentificationNumber() {
    return identificationNumber;
  }

  public void setIdentificationNumber(String identificationNumber) {
    this.identificationNumber = identificationNumber;
  }

  public Sender identificationType(IdentificationTypeEnum identificationType) {
    this.identificationType = identificationType;
    return this;
  }

   /**
   * Document to be identified. The identification type can be one of the following:  - &#x60;DL&#x60;: Driving License - &#x60;PP&#x60;: International Passport - &#x60;ID&#x60;: National ID - &#x60;OT&#x60;: Other
   * @return identificationType
  **/
  @ApiModelProperty(example = "ID", value = "Document to be identified. The identification type can be one of the following:  - `DL`: Driving License - `PP`: International Passport - `ID`: National ID - `OT`: Other")
  public IdentificationTypeEnum getIdentificationType() {
    return identificationType;
  }

  public void setIdentificationType(IdentificationTypeEnum identificationType) {
    this.identificationType = identificationType;
  }

  public Sender name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of sender (used only with a Business sender)
   * @return name
  **/
  @ApiModelProperty(value = "Name of sender (used only with a Business sender)")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Sender firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of sender (used only with a Personal sender)
   * @return firstName
  **/
  @ApiModelProperty(example = "Johnny", value = "First name of sender (used only with a Personal sender)")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public Sender middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

   /**
   * Middle name of sender (used only with a Personal sender)
   * @return middleName
  **/
  @ApiModelProperty(example = "Johnny", value = "Middle name of sender (used only with a Personal sender)")
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }

  public Sender lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of sender (used only with a Personal sender)
   * @return lastName
  **/
  @ApiModelProperty(example = "English", value = "Last name of sender (used only with a Personal sender)")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public Sender birthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Date of birth of sender (used only with a Personal sender)
   * @return birthDate
  **/
  @ApiModelProperty(value = "Date of birth of sender (used only with a Personal sender)")
  public LocalDate getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
  }

  public Sender occupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

   /**
   * Occupation of sender (used only with a Personal sender)
   * @return occupation
  **/
  @ApiModelProperty(example = "Accountant", value = "Occupation of sender (used only with a Personal sender)")
  public String getOccupation() {
    return occupation;
  }

  public void setOccupation(String occupation) {
    this.occupation = occupation;
  }

  public Sender nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

   /**
   * The nationality of the sender (used only with a Personal sender)
   * @return nationality
  **/
  @ApiModelProperty(example = "NG", value = "The nationality of the sender (used only with a Personal sender)")
  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }

  public Sender legalEntityType(LegalEntityTypeEnum legalEntityType) {
    this.legalEntityType = legalEntityType;
    return this;
  }

   /**
   * Legal entity type (used only with a Business sender)
   * @return legalEntityType
  **/
  @ApiModelProperty(example = "sole_proprietorship", value = "Legal entity type (used only with a Business sender)")
  public LegalEntityTypeEnum getLegalEntityType() {
    return legalEntityType;
  }

  public void setLegalEntityType(LegalEntityTypeEnum legalEntityType) {
    this.legalEntityType = legalEntityType;
  }

  public Sender registrationDate(String registrationDate) {
    this.registrationDate = registrationDate;
    return this;
  }

   /**
   * The registration date (used only with a Business sender)
   * @return registrationDate
  **/
  @ApiModelProperty(value = "The registration date (used only with a Business sender)")
  public String getRegistrationDate() {
    return registrationDate;
  }

  public void setRegistrationDate(String registrationDate) {
    this.registrationDate = registrationDate;
  }

  public Sender registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

   /**
   * The registration number (used only with a Business sender)
   * @return registrationNumber
  **/
  @ApiModelProperty(value = "The registration number (used only with a Business sender)")
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }

  public Sender natureOfBusiness(String natureOfBusiness) {
    this.natureOfBusiness = natureOfBusiness;
    return this;
  }

   /**
   * Nature of business options (used only with a Business sender)
   * @return natureOfBusiness
  **/
  @ApiModelProperty(value = "Nature of business options (used only with a Business sender)")
  public String getNatureOfBusiness() {
    return natureOfBusiness;
  }

  public void setNatureOfBusiness(String natureOfBusiness) {
    this.natureOfBusiness = natureOfBusiness;
  }

  public Sender sourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
    return this;
  }

   /**
   * The source of funds
   * @return sourceOfFunds
  **/
  @ApiModelProperty(value = "The source of funds")
  public String getSourceOfFunds() {
    return sourceOfFunds;
  }

  public void setSourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
  }

  public Sender coreBusinessActivities(String coreBusinessActivities) {
    this.coreBusinessActivities = coreBusinessActivities;
    return this;
  }

   /**
   * The core activities (used only with a Business sender)
   * @return coreBusinessActivities
  **/
  @ApiModelProperty(value = "The core activities (used only with a Business sender)")
  public String getCoreBusinessActivities() {
    return coreBusinessActivities;
  }

  public void setCoreBusinessActivities(String coreBusinessActivities) {
    this.coreBusinessActivities = coreBusinessActivities;
  }

  public Sender purposeOfOpeningAccount(String purposeOfOpeningAccount) {
    this.purposeOfOpeningAccount = purposeOfOpeningAccount;
    return this;
  }

   /**
   * The purpose for opening their account (used only with a Business sender)
   * @return purposeOfOpeningAccount
  **/
  @ApiModelProperty(value = "The purpose for opening their account (used only with a Business sender)")
  public String getPurposeOfOpeningAccount() {
    return purposeOfOpeningAccount;
  }

  public void setPurposeOfOpeningAccount(String purposeOfOpeningAccount) {
    this.purposeOfOpeningAccount = purposeOfOpeningAccount;
  }

  public Sender officePhone(String officePhone) {
    this.officePhone = officePhone;
    return this;
  }

   /**
   * The official phone number (used only with a Business sender)
   * @return officePhone
  **/
  @ApiModelProperty(value = "The official phone number (used only with a Business sender)")
  public String getOfficePhone() {
    return officePhone;
  }

  public void setOfficePhone(String officePhone) {
    this.officePhone = officePhone;
  }

  public Sender vatRegistrationNumber(String vatRegistrationNumber) {
    this.vatRegistrationNumber = vatRegistrationNumber;
    return this;
  }

   /**
   * The VAT registration number (used only with a Business sender)
   * @return vatRegistrationNumber
  **/
  @ApiModelProperty(value = "The VAT registration number (used only with a Business sender)")
  public String getVatRegistrationNumber() {
    return vatRegistrationNumber;
  }

  public void setVatRegistrationNumber(String vatRegistrationNumber) {
    this.vatRegistrationNumber = vatRegistrationNumber;
  }

  public Sender financialRegulator(String financialRegulator) {
    this.financialRegulator = financialRegulator;
    return this;
  }

   /**
   * The Financial Regulator (used only with a Business sender)
   * @return financialRegulator
  **/
  @ApiModelProperty(value = "The Financial Regulator (used only with a Business sender)")
  public String getFinancialRegulator() {
    return financialRegulator;
  }

  public void setFinancialRegulator(String financialRegulator) {
    this.financialRegulator = financialRegulator;
  }

  public Sender regulatoryLicenceNumber(String regulatoryLicenceNumber) {
    this.regulatoryLicenceNumber = regulatoryLicenceNumber;
    return this;
  }

   /**
   * The Regulatory Licence Number (used only with a Business sender)
   * @return regulatoryLicenceNumber
  **/
  @ApiModelProperty(value = "The Regulatory Licence Number (used only with a Business sender)")
  public String getRegulatoryLicenceNumber() {
    return regulatoryLicenceNumber;
  }

  public void setRegulatoryLicenceNumber(String regulatoryLicenceNumber) {
    this.regulatoryLicenceNumber = regulatoryLicenceNumber;
  }

  public Sender contactPersonEmail(String contactPersonEmail) {
    this.contactPersonEmail = contactPersonEmail;
    return this;
  }

   /**
   * The contact&#39;s email address (used only with a Business sender)
   * @return contactPersonEmail
  **/
  @ApiModelProperty(value = "The contact's email address (used only with a Business sender)")
  public String getContactPersonEmail() {
    return contactPersonEmail;
  }

  public void setContactPersonEmail(String contactPersonEmail) {
    this.contactPersonEmail = contactPersonEmail;
  }

  public Sender tradingCountry(String tradingCountry) {
    this.tradingCountry = tradingCountry;
    return this;
  }

   /**
   * The Business trading country (used only with a Business sender)
   * @return tradingCountry
  **/
  @ApiModelProperty(value = "The Business trading country (used only with a Business sender)")
  public String getTradingCountry() {
    return tradingCountry;
  }

  public void setTradingCountry(String tradingCountry) {
    this.tradingCountry = tradingCountry;
  }

  public Sender tradingAddress(String tradingAddress) {
    this.tradingAddress = tradingAddress;
    return this;
  }

   /**
   * The Business trading address (used only with a Business sender)
   * @return tradingAddress
  **/
  @ApiModelProperty(value = "The Business trading address (used only with a Business sender)")
  public String getTradingAddress() {
    return tradingAddress;
  }

  public void setTradingAddress(String tradingAddress) {
    this.tradingAddress = tradingAddress;
  }

  public Sender numberMonthlyTransactions(String numberMonthlyTransactions) {
    this.numberMonthlyTransactions = numberMonthlyTransactions;
    return this;
  }

   /**
   * The estimated number of monthly transactions (used only with a Business sender)
   * @return numberMonthlyTransactions
  **/
  @ApiModelProperty(value = "The estimated number of monthly transactions (used only with a Business sender)")
  public String getNumberMonthlyTransactions() {
    return numberMonthlyTransactions;
  }

  public void setNumberMonthlyTransactions(String numberMonthlyTransactions) {
    this.numberMonthlyTransactions = numberMonthlyTransactions;
  }

  public Sender amountMonthlyTransactions(String amountMonthlyTransactions) {
    this.amountMonthlyTransactions = amountMonthlyTransactions;
    return this;
  }

   /**
   * The estimated amount for all transactions each month in USD (used only with a Business sender)
   * @return amountMonthlyTransactions
  **/
  @ApiModelProperty(value = "The estimated amount for all transactions each month in USD (used only with a Business sender)")
  public String getAmountMonthlyTransactions() {
    return amountMonthlyTransactions;
  }

  public void setAmountMonthlyTransactions(String amountMonthlyTransactions) {
    this.amountMonthlyTransactions = amountMonthlyTransactions;
  }

  public Sender documents(List<Document> documents) {
    this.documents = documents;
    return this;
  }

  public Sender addDocumentsItem(Document documentsItem) {
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * Needed for KYC checks. Required to approve the sender unless KYC is waived for your account. Please send us an empty list of documents: &#x60;\&quot;documents\&quot;: [ ]&#x60; in the request if KYC has been waived.  If the documents already exist, please send the Document ID eg. &#x60;&#x60;&#x60;JSON \&quot;documents\&quot;: [   {     \&quot;id\&quot;: \&quot;b6648ba3-1c7b-4f59-8580-684899c84a07\&quot;   } ] &#x60;&#x60;&#x60;
   * @return documents
  **/
  @ApiModelProperty(example = "[{\"id\":\"b6648ba3-1c7b-4f59-8580-684899c84a07\"}]", required = true, value = "Needed for KYC checks. Required to approve the sender unless KYC is waived for your account. Please send us an empty list of documents: `\"documents\": [ ]` in the request if KYC has been waived.  If the documents already exist, please send the Document ID eg. ```JSON \"documents\": [   {     \"id\": \"b6648ba3-1c7b-4f59-8580-684899c84a07\"   } ] ```")
  public List<Document> getDocuments() {
    return documents;
  }

  public void setDocuments(List<Document> documents) {
    this.documents = documents;
  }

  public Sender metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Metadata of sender. You can store any detail specific to your integration here (for example the local ID of the sender on your end). When requesting sender details you will receive the sent metadata back. Also when sending sender related webhooks you will receive the details stored here as well.
   * @return metadata
  **/
  @ApiModelProperty(example = "{}", value = "Metadata of sender. You can store any detail specific to your integration here (for example the local ID of the sender on your end). When requesting sender details you will receive the sent metadata back. Also when sending sender related webhooks you will receive the details stored here as well.")
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }

   /**
   * The fields that have some problems and don&#39;t pass validation
   * @return errors
  **/
  @ApiModelProperty(example = "{\"phone_number\":[{\"error\":\"invalid\"}],\"documents\":[{\"error\":\"blank\"}]}", value = "The fields that have some problems and don't pass validation")
  public Map<String, List<ValidationErrorDescription>> getErrors() {
    return errors;
  }

  public Sender onboardingStatus(String onboardingStatus) {
    this.onboardingStatus = onboardingStatus;
    return this;
  }

   /**
   * The onboarding status of the sender
   * @return onboardingStatus
  **/
  @ApiModelProperty(value = "The onboarding status of the sender")
  public String getOnboardingStatus() {
    return onboardingStatus;
  }

  public void setOnboardingStatus(String onboardingStatus) {
    this.onboardingStatus = onboardingStatus;
  }

  public Sender politicallyExposedPeople(List<PoliticallyExposedPerson> politicallyExposedPeople) {
    this.politicallyExposedPeople = politicallyExposedPeople;
    return this;
  }

  public Sender addPoliticallyExposedPeopleItem(PoliticallyExposedPerson politicallyExposedPeopleItem) {
    if (this.politicallyExposedPeople == null) {
      this.politicallyExposedPeople = new ArrayList<>();
    }
    this.politicallyExposedPeople.add(politicallyExposedPeopleItem);
    return this;
  }

   /**
   * An optional list of politically exposed people, individuals who are or have been entrusted with prominent public functions by a country, for example heads of state or heads of government, senior politicians, senior government, judicial or military officials, senior executives of state owned corporations, important political party officials.  There is a limit of three (3) politically exposed people per Sender.  Politically exposed person example: &#x60;&#x60;&#x60;json   {     \&quot;politically_exposed_person\&quot;: {       \&quot;name\&quot;: \&quot;Ronald Reagan\&quot;,       \&quot;position\&quot;: \&quot;President of the United States\&quot;,       \&quot;started_date\&quot;: \&quot;1981-01-20T00:00:00.000Z\&quot;,       \&quot;ended_date\&quot;: \&quot;1989-01-20T00:00:00.000Z\&quot;,       \&quot;sender_id\&quot;: \&quot;344fb668-196d-43db-9d94-b34b7e6c7e0b\&quot;     }   } &#x60;&#x60;&#x60;
   * @return politicallyExposedPeople
  **/
  @ApiModelProperty(example = "[{\"id\":\"40\",\"name\":\"Ronald Reagan\",\"position\":\"President of the United States\",\"started_date\":\"1981-01-20T00:00:00.000Z\",\"ended_date\":\"1989-01-20T00:00:00.000Z\",\"sender_id\":\"f9dc79ca-0c39-4add-9f4d-5ad7e6f187fb\"}]", value = "An optional list of politically exposed people, individuals who are or have been entrusted with prominent public functions by a country, for example heads of state or heads of government, senior politicians, senior government, judicial or military officials, senior executives of state owned corporations, important political party officials.  There is a limit of three (3) politically exposed people per Sender.  Politically exposed person example: ```json   {     \"politically_exposed_person\": {       \"name\": \"Ronald Reagan\",       \"position\": \"President of the United States\",       \"started_date\": \"1981-01-20T00:00:00.000Z\",       \"ended_date\": \"1989-01-20T00:00:00.000Z\",       \"sender_id\": \"344fb668-196d-43db-9d94-b34b7e6c7e0b\"     }   } ```")
  public List<PoliticallyExposedPerson> getPoliticallyExposedPeople() {
    return politicallyExposedPeople;
  }

  public void setPoliticallyExposedPeople(List<PoliticallyExposedPerson> politicallyExposedPeople) {
    this.politicallyExposedPeople = politicallyExposedPeople;
  }

  public Sender externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Optional ID that is supplied by partner linking it to the partner&#39;s own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not.
   * @return externalId
  **/
  @ApiModelProperty(example = "806ec63a-a5a7-43cc-9d75-1ee74fbcc026", value = "Optional ID that is supplied by partner linking it to the partner's own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not.")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

   /**
   * Date and time of sender was created
   * @return createdAt
  **/
  @ApiModelProperty(example = "2019-01-11T00:00:00.001+0000", value = "Date and time of sender was created")
  public String getCreatedAt() {
    return createdAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sender sender = (Sender) o;
    return Objects.equals(this.id, sender.id) &&
        Objects.equals(this.type, sender.type) &&
        Objects.equals(this.state, sender.state) &&
        Objects.equals(this.country, sender.country) &&
        Objects.equals(this.street, sender.street) &&
        Objects.equals(this.postalCode, sender.postalCode) &&
        Objects.equals(this.city, sender.city) &&
        Objects.equals(this.phoneCountry, sender.phoneCountry) &&
        Objects.equals(this.phoneNumber, sender.phoneNumber) &&
        Objects.equals(this.email, sender.email) &&
        Objects.equals(this.ip, sender.ip) &&
        Objects.equals(this.addressDescription, sender.addressDescription) &&
        Objects.equals(this.identificationNumber, sender.identificationNumber) &&
        Objects.equals(this.identificationType, sender.identificationType) &&
        Objects.equals(this.name, sender.name) &&
        Objects.equals(this.firstName, sender.firstName) &&
        Objects.equals(this.middleName, sender.middleName) &&
        Objects.equals(this.lastName, sender.lastName) &&
        Objects.equals(this.birthDate, sender.birthDate) &&
        Objects.equals(this.occupation, sender.occupation) &&
        Objects.equals(this.nationality, sender.nationality) &&
        Objects.equals(this.legalEntityType, sender.legalEntityType) &&
        Objects.equals(this.registrationDate, sender.registrationDate) &&
        Objects.equals(this.registrationNumber, sender.registrationNumber) &&
        Objects.equals(this.natureOfBusiness, sender.natureOfBusiness) &&
        Objects.equals(this.sourceOfFunds, sender.sourceOfFunds) &&
        Objects.equals(this.coreBusinessActivities, sender.coreBusinessActivities) &&
        Objects.equals(this.purposeOfOpeningAccount, sender.purposeOfOpeningAccount) &&
        Objects.equals(this.officePhone, sender.officePhone) &&
        Objects.equals(this.vatRegistrationNumber, sender.vatRegistrationNumber) &&
        Objects.equals(this.financialRegulator, sender.financialRegulator) &&
        Objects.equals(this.regulatoryLicenceNumber, sender.regulatoryLicenceNumber) &&
        Objects.equals(this.contactPersonEmail, sender.contactPersonEmail) &&
        Objects.equals(this.tradingCountry, sender.tradingCountry) &&
        Objects.equals(this.tradingAddress, sender.tradingAddress) &&
        Objects.equals(this.numberMonthlyTransactions, sender.numberMonthlyTransactions) &&
        Objects.equals(this.amountMonthlyTransactions, sender.amountMonthlyTransactions) &&
        Objects.equals(this.documents, sender.documents) &&
        Objects.equals(this.metadata, sender.metadata) &&
        Objects.equals(this.errors, sender.errors) &&
        Objects.equals(this.onboardingStatus, sender.onboardingStatus) &&
        Objects.equals(this.politicallyExposedPeople, sender.politicallyExposedPeople) &&
        Objects.equals(this.externalId, sender.externalId) &&
        Objects.equals(this.createdAt, sender.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, state, country, street, postalCode, city, phoneCountry, phoneNumber, email, ip, addressDescription, identificationNumber, identificationType, name, firstName, middleName, lastName, birthDate, occupation, nationality, legalEntityType, registrationDate, registrationNumber, natureOfBusiness, sourceOfFunds, coreBusinessActivities, purposeOfOpeningAccount, officePhone, vatRegistrationNumber, financialRegulator, regulatoryLicenceNumber, contactPersonEmail, tradingCountry, tradingAddress, numberMonthlyTransactions, amountMonthlyTransactions, documents, metadata, errors, onboardingStatus, politicallyExposedPeople, externalId, createdAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sender {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    phoneCountry: ").append(toIndentedString(phoneCountry)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    addressDescription: ").append(toIndentedString(addressDescription)).append("\n");
    sb.append("    identificationNumber: ").append(toIndentedString(identificationNumber)).append("\n");
    sb.append("    identificationType: ").append(toIndentedString(identificationType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    occupation: ").append(toIndentedString(occupation)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    legalEntityType: ").append(toIndentedString(legalEntityType)).append("\n");
    sb.append("    registrationDate: ").append(toIndentedString(registrationDate)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    natureOfBusiness: ").append(toIndentedString(natureOfBusiness)).append("\n");
    sb.append("    sourceOfFunds: ").append(toIndentedString(sourceOfFunds)).append("\n");
    sb.append("    coreBusinessActivities: ").append(toIndentedString(coreBusinessActivities)).append("\n");
    sb.append("    purposeOfOpeningAccount: ").append(toIndentedString(purposeOfOpeningAccount)).append("\n");
    sb.append("    officePhone: ").append(toIndentedString(officePhone)).append("\n");
    sb.append("    vatRegistrationNumber: ").append(toIndentedString(vatRegistrationNumber)).append("\n");
    sb.append("    financialRegulator: ").append(toIndentedString(financialRegulator)).append("\n");
    sb.append("    regulatoryLicenceNumber: ").append(toIndentedString(regulatoryLicenceNumber)).append("\n");
    sb.append("    contactPersonEmail: ").append(toIndentedString(contactPersonEmail)).append("\n");
    sb.append("    tradingCountry: ").append(toIndentedString(tradingCountry)).append("\n");
    sb.append("    tradingAddress: ").append(toIndentedString(tradingAddress)).append("\n");
    sb.append("    numberMonthlyTransactions: ").append(toIndentedString(numberMonthlyTransactions)).append("\n");
    sb.append("    amountMonthlyTransactions: ").append(toIndentedString(amountMonthlyTransactions)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    onboardingStatus: ").append(toIndentedString(onboardingStatus)).append("\n");
    sb.append("    politicallyExposedPeople: ").append(toIndentedString(politicallyExposedPeople)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

