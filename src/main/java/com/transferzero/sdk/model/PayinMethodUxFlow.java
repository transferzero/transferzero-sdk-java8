/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Describes the collection experience that will be presented to the sender. Can be one of the following:  * &#x60;ussd_popup&#x60;: Payment prompt is pushed to the sender&#39;s phone. They can approve or decline. Supported for GHS::Mobile, UGX::Mobile * &#x60;ussd_voucher&#x60;: Sender has to request an authorization code via ussd of the mobile provider and then provide that code to initiate the transaction. Supported for XOF::Mobile(Orange) * &#x60;ussd_menu_approval&#x60;: Sender has to dial a USSD code and navigate to a list of payments to approve. * &#x60;otp_verified_ussd_popup&#x60;: Sender receives and validates an OTP then a payment prompt is pushed if the OTP they submit is valid. * &#x60;bank_transfer&#x60;: For bank collections. Sender should send funds to the bank account details specified in out_details. Supported for EUR::Bank, GBP::Bank * &#x60;http_redirect&#x60;: The sender will be redirected to a website where they can fill in their details to initiate the collection.
 */
@JsonAdapter(PayinMethodUxFlow.Adapter.class)
public enum PayinMethodUxFlow {
  
  USSD_POPUP("ussd_popup"),
  
  USSD_VOUCHER("ussd_voucher"),
  
  USSD_MENU_APPROVAL("ussd_menu_approval"),
  
  OTP_VERIFIED_USSD_POPUP("otp_verified_ussd_popup"),
  
  BANK_TRANSFER("bank_transfer"),
  
  HTTP_REDIRECT("http_redirect"),
  
  BLOCKCHAIN("blockchain"),
  
  UNKNOWN("unknown");

  private String value;

  PayinMethodUxFlow(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PayinMethodUxFlow fromValue(String value) {
    for (PayinMethodUxFlow b : PayinMethodUxFlow.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PayinMethodUxFlow> {
    @Override
    public void write(final JsonWriter jsonWriter, final PayinMethodUxFlow enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PayinMethodUxFlow read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PayinMethodUxFlow.fromValue(value);
    }
  }
}

