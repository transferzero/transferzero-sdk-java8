/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Pagination
 */

public class Pagination {
  public static final String SERIALIZED_NAME_CURRENT_PAGE = "current_page";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGE)
  private Integer currentPage;

  public static final String SERIALIZED_NAME_NEXT_PAGE = "next_page";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE)
  private Integer nextPage;

  public static final String SERIALIZED_NAME_PREV_PAGE = "prev_page";
  @SerializedName(SERIALIZED_NAME_PREV_PAGE)
  private Integer prevPage;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "total_pages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Integer totalPages;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "total_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Integer totalCount;

   /**
   * The number of the current page
   * @return currentPage
  **/
  @ApiModelProperty(example = "2", value = "The number of the current page")
  public Integer getCurrentPage() {
    return currentPage;
  }

   /**
   * The number of the next page. If no next page exists, this will be &#x60;null&#x60;
   * @return nextPage
  **/
  @ApiModelProperty(example = "3", value = "The number of the next page. If no next page exists, this will be `null`")
  public Integer getNextPage() {
    return nextPage;
  }

   /**
   * The number of the previous page. If no previous page exists, this will be &#x60;null&#x60;
   * @return prevPage
  **/
  @ApiModelProperty(example = "1", value = "The number of the previous page. If no previous page exists, this will be `null`")
  public Integer getPrevPage() {
    return prevPage;
  }

   /**
   * The number of pages in the result set
   * @return totalPages
  **/
  @ApiModelProperty(example = "5", value = "The number of pages in the result set")
  public Integer getTotalPages() {
    return totalPages;
  }

   /**
   * The total number of results in the set
   * @return totalCount
  **/
  @ApiModelProperty(example = "45", value = "The total number of results in the set")
  public Integer getTotalCount() {
    return totalCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pagination pagination = (Pagination) o;
    return Objects.equals(this.currentPage, pagination.currentPage) &&
        Objects.equals(this.nextPage, pagination.nextPage) &&
        Objects.equals(this.prevPage, pagination.prevPage) &&
        Objects.equals(this.totalPages, pagination.totalPages) &&
        Objects.equals(this.totalCount, pagination.totalCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPage, nextPage, prevPage, totalPages, totalCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pagination {\n");
    sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
    sb.append("    nextPage: ").append(toIndentedString(nextPage)).append("\n");
    sb.append("    prevPage: ").append(toIndentedString(prevPage)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

