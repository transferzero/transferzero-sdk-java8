/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The state of the recipient. Can be one of the following:  * &#x60;initial&#x60;: We haven&#39;t initiated the payout yet, you can still cancel the transaction * &#x60;pending&#x60;: Payout has been initiated and we&#39;re waiting from a response from the provider. The transaction cannot be cancelled * &#x60;success&#x60;: Payout is done, and the recipient has been paid. * &#x60;error&#x60;: There was an error from the provider, you can find more details in the &#x60;state_reason&#x60; attribute. We will usually retry the transaction at a later date. You can either wait, edit the recipient or cancel the transaction. * &#x60;refunded&#x60;: You asked us to cancel the transaction and we refunded the money. * &#x60;manual&#x60;: There were too many errors on this transaction, and we stopped retrying. Please edit the recipient, contact us or cancel the transaction. * &#x60;stuck&#x60;: We didn&#39;t receive a response from the provider in time, and we don&#39;t know whether it has been paid our not. Please contact us for further details. * &#x60;overpaid&#x60;: The recipient was paid out more than was requested (not applicable for most of the payout providers) * &#x60;canceled&#x60;: The transaction has been cancelled, and we will refund the money soon * &#x60;exception&#x60;: Some exception has happened; please contact TransferZero
 */
@JsonAdapter(RecipientState.Adapter.class)
public enum RecipientState {
  
  INITIAL("initial"),
  
  PENDING("pending"),
  
  SUCCESS("success"),
  
  ERROR("error"),
  
  REFUNDED("refunded"),
  
  MANUAL("manual"),
  
  STUCK("stuck"),
  
  OVERPAID("overpaid"),
  
  CANCELED("canceled"),
  
  EXCEPTION("exception");

  private String value;

  RecipientState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RecipientState fromValue(String value) {
    for (RecipientState b : RecipientState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RecipientState> {
    @Override
    public void write(final JsonWriter jsonWriter, final RecipientState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RecipientState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return RecipientState.fromValue(value);
    }
  }
}

