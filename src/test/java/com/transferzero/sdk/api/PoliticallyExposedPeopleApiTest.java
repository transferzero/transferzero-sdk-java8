/*
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.model.PoliticallyExposedPerson;
import com.transferzero.sdk.model.PoliticallyExposedPersonListResponse;
import com.transferzero.sdk.model.PoliticallyExposedPersonResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoliticallyExposedPeopleApi
 */
@Ignore
public class PoliticallyExposedPeopleApiTest {

    private final PoliticallyExposedPeopleApi api = new PoliticallyExposedPeopleApi();

    
    /**
     * Deleting a politically exposed person
     *
     * Deletes a single politically exposed person given the PEP ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePoliticallyExposedPersonTest() throws ApiException {
        Integer politicallyExposedPersonID = null;
        api.deletePoliticallyExposedPerson(politicallyExposedPersonID);

        // TODO: test validations
    }
    
    /**
     * Listing Politically Exposed People
     *
     * Get a list of politically exposed people
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoliticallyExposedPeopleTest() throws ApiException {
        UUID senderId = null;
        PoliticallyExposedPersonListResponse response = api.getPoliticallyExposedPeople()
                .senderId(senderId)
                .execute();

        // TODO: test validations
    }
    
    /**
     * Fetching a politically exposed person
     *
     * Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoliticallyExposedPersonTest() throws ApiException {
        Integer politicallyExposedPersonID = null;
        UUID senderId = null;
        PoliticallyExposedPersonResponse response = api.getPoliticallyExposedPerson(politicallyExposedPersonID)
                .senderId(senderId)
                .execute();

        // TODO: test validations
    }
    
    /**
     * Updating a politically exposed person
     *
     * Updates a single politically exposed person given the PEP ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPoliticallyExposedPersonTest() throws ApiException {
        Integer politicallyExposedPersonID = null;
        PoliticallyExposedPerson politicallyExposedPerson = null;
        PoliticallyExposedPersonResponse response = api.patchPoliticallyExposedPerson(politicallyExposedPersonID, politicallyExposedPerson);

        // TODO: test validations
    }
    
    /**
     * Creating a politically exposed person
     *
     * Creates a new politically exposed person in our system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPoliticallyExposedPeopleTest() throws ApiException {
        PoliticallyExposedPerson politicallyExposedPerson = null;
        PoliticallyExposedPersonResponse response = api.postPoliticallyExposedPeople(politicallyExposedPerson);

        // TODO: test validations
    }
    
}
