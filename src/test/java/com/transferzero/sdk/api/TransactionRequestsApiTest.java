/*
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.model.DocumentResponse;
import com.transferzero.sdk.model.TransactionReqLimitsResponse;
import com.transferzero.sdk.model.TransactionReqListResponse;
import com.transferzero.sdk.model.TransactionReqRequest;
import com.transferzero.sdk.model.TransactionReqResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionRequestsApi
 */
@Ignore
public class TransactionRequestsApiTest {

    private final TransactionRequestsApi api = new TransactionRequestsApi();

    
    /**
     * Adding a document to a transaction request (deprecated)
     *
     * Adds a new document to a transaction request 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDocumentTransactionRequestTest() throws ApiException {
        UUID transactionRequestID = null;
        UUID documentId = null;
        DocumentResponse response = api.addDocumentTransactionRequest(transactionRequestID, documentId);

        // TODO: test validations
    }
    
    /**
     * Cancelling a transaction request
     *
     * Cancels a transaction request 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelTransactionRequestTest() throws ApiException {
        UUID transactionRequestID = null;
        String reasonCancellation = null;
        TransactionReqResponse response = api.cancelTransactionRequest(transactionRequestID, reasonCancellation);

        // TODO: test validations
    }
    
    /**
     * Confirming a transaction request
     *
     * Confirms a new transaction request 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmTransactionRequestTest() throws ApiException {
        UUID transactionRequestID = null;
        TransactionReqResponse response = api.confirmTransactionRequest(transactionRequestID);

        // TODO: test validations
    }
    
    /**
     * Fetching a transaction request
     *
     * Returns a single transaction request by the Transaction Request ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionRequestTest() throws ApiException {
        UUID transactionRequestID = null;
        Boolean versioned = null;
        TransactionReqResponse response = api.getTransactionRequest(transactionRequestID)
                .versioned(versioned)
                .execute();

        // TODO: test validations
    }
    
    /**
     * Listing transaction requests
     *
     * Get a list of transaction requests
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionRequestsTest() throws ApiException {
        Integer page = null;
        Integer per = null;
        List<String> state = null;
        List<String> currency = null;
        String createdAtFrom = null;
        String createdAtTo = null;
        String amountFrom = null;
        String amountTo = null;
        String senderId = null;
        Boolean versioned = null;
        List<String> tag = null;
        List<String> ids = null;
        List<String> included = null;
        List<String> excluded = null;
        TransactionReqListResponse response = api.getTransactionRequests()
                .page(page)
                .per(per)
                .state(state)
                .currency(currency)
                .createdAtFrom(createdAtFrom)
                .createdAtTo(createdAtTo)
                .amountFrom(amountFrom)
                .amountTo(amountTo)
                .senderId(senderId)
                .versioned(versioned)
                .tag(tag)
                .ids(ids)
                .included(included)
                .excluded(excluded)
                .execute();

        // TODO: test validations
    }
    
    /**
     * Creating a transaction request
     *
     * Creates a new transaction request 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTransactionRequestTest() throws ApiException {
        TransactionReqRequest transactionReqRequest = null;
        TransactionReqResponse response = api.postTransactionRequest(transactionReqRequest);

        // TODO: test validations
    }
    
    /**
     * Adding a document to a transaction request
     *
     * Adds a new document to a transaction request 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restfulAddDocumentTransactionRequestTest() throws ApiException {
        UUID transactionRequestID = null;
        UUID documentID = null;
        DocumentResponse response = api.restfulAddDocumentTransactionRequest(transactionRequestID, documentID);

        // TODO: test validations
    }
    
    /**
     * Specifies the limits for transaction requests
     *
     * Specifies the minimum and maximum limits for transaction requests
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionRequestLimitsTest() throws ApiException {
        TransactionReqLimitsResponse response = api.transactionRequestLimits();

        // TODO: test validations
    }
    
    /**
     * Validates a transaction request payload
     *
     * Validates fields in a transaction request payload and displays invalid or missing fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateTransactionRequestsTest() throws ApiException {
        TransactionReqRequest transactionReqRequest = null;
        TransactionReqResponse response = api.validateTransactionRequests(transactionReqRequest);

        // TODO: test validations
    }
    
}
