/*
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.model.EntityCreateRequest;
import com.transferzero.sdk.model.EntityCreateResponse;
import com.transferzero.sdk.model.EntityListResponse;
import com.transferzero.sdk.model.EntityUpdateRequest;
import com.transferzero.sdk.model.EntityUpdateResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntitiesApi
 */
@Ignore
public class EntitiesApiTest {

    private final EntitiesApi api = new EntitiesApi();

    
    /**
     * Listing entities
     *
     * Get a list of entities
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntitiesTest() throws ApiException {
        String entityType = null;
        List<String> ids = null;
        EntityListResponse response = api.getEntities(entityType, ids)
                .execute();

        // TODO: test validations
    }
    
    /**
     * Listing entities by params (rating and/or state)
     *
     * Get a list of entities scoped by the requested params (rating and/or state)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntitiesByParamsTest() throws ApiException {
        String entityType = null;
        String rating = null;
        String state = null;
        EntityListResponse response = api.getEntitiesByParams(entityType)
                .rating(rating)
                .state(state)
                .execute();

        // TODO: test validations
    }
    
    /**
     * Fetching a entity
     *
     * Returns a single entity by the Entity ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntityTest() throws ApiException {
        String entityType = null;
        UUID entityID = null;
        EntityCreateResponse response = api.getEntity(entityType, entityID)
                .execute();

        // TODO: test validations
    }
    
    /**
     * Updating an entity
     *
     * Updates a single entity by the Entity ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchEntityTest() throws ApiException {
        String entityType = null;
        UUID entityID = null;
        EntityUpdateRequest entityUpdateRequest = null;
        EntityUpdateResponse response = api.patchEntity(entityType, entityID, entityUpdateRequest);

        // TODO: test validations
    }
    
    /**
     * Creating an entity
     *
     * Creates a new entity. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postEntityTest() throws ApiException {
        String entityType = null;
        UUID entityID = null;
        EntityCreateRequest entityCreateRequest = null;
        EntityCreateResponse response = api.postEntity(entityType, entityID, entityCreateRequest);

        // TODO: test validations
    }
    
}
