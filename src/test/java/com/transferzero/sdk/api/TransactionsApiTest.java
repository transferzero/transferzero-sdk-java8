/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.sdk.api;

import com.transferzero.sdk.ApiException;
import com.transferzero.sdk.model.ErrorStatus;
import com.transferzero.sdk.model.PayinMethodRequest;
import com.transferzero.sdk.model.TransactionListResponse;
import com.transferzero.sdk.model.TransactionRequest;
import com.transferzero.sdk.model.TransactionResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Ignore
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    
    /**
     * Calculates transaction amounts for a transaction payload
     *
     * Calculates the input, output and fee amounts for the recipients in a transaction payload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculateTransactionsTest() throws ApiException {
        TransactionRequest transactionRequest = null;
        TransactionResponse response = api.calculateTransactions(transactionRequest);

        // TODO: test validations
    }
    
    /**
     * Fetch a single transaction
     *
     * Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionTest() throws ApiException {
        UUID transactionID = null;
        TransactionResponse response = api.getTransaction(transactionID);

        // TODO: test validations
    }
    
    /**
     * Get a list of transactions
     *
     * Retrieves a paginated list of the Transactions created by your API key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        Integer page = null;
        Integer per = null;
        String externalId = null;
        TransactionListResponse response = api.getTransactions(page, per, externalId);

        // TODO: test validations
    }
    
    /**
     * Creates a fake payin for transaction
     *
     * This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void payinTransactionTest() throws ApiException {
        UUID transactionID = null;
        PayinMethodRequest payinMethodRequest = null;
        TransactionResponse response = api.payinTransaction(transactionID, payinMethodRequest);

        // TODO: test validations
    }
    
    /**
     * Creates a fake payout for transaction
     *
     * This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void payoutTransactionTest() throws ApiException {
        UUID transactionID = null;
        TransactionResponse response = api.payoutTransaction(transactionID);

        // TODO: test validations
    }
    
    /**
     * Creates a new transaction
     *
     * Transactions are the main objects in the TransferZero API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTransactionsTest() throws ApiException {
        TransactionRequest transactionRequest = null;
        TransactionResponse response = api.postTransactions(transactionRequest);

        // TODO: test validations
    }
    
    /**
     * Validates a transaction payload
     *
     * Validates fields in a transaction payload and displays invalid or missing fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateTransactionsTest() throws ApiException {
        TransactionRequest transactionRequest = null;
        TransactionResponse response = api.validateTransactions(transactionRequest);

        // TODO: test validations
    }
    
}
