/*
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferzero.test;
import com.transferzero.sdk.model.*;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import com.transferzero.sdk.ApiClient;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import static org.junit.jupiter.api.Assertions.*;
import com.transferzero.sdk.ApiException;

public class ApplicationTest {
  private Application application;
  private ApiClient apiClient;

  public void setUp() {
    application = new Application();
  }
  @BeforeEach
  public void setupApiClient() {
    apiClient = new ApiClient();
    apiClient.setApiKey("HhHFLqJcX8VYkyKK5PqwAATFaN5LdScsILjLWi1NiV6Mfs+AMQUIKeHBthSBAxweh0ibaJ0vLLZRIDFF87Sduw==");
    apiClient.setApiSecret("WEUPNQEzfznymW3r1jX8n+IFmUWi+FVh9L5eXVot6Ed57FsKsLYrrA7MwDEb5pbkuJPYcwdFVALoWfZ/5EFdWg==");
    apiClient.setBasePath("https://api-staging.bitpesa.co/v1");
  }
String suuid = UUID.randomUUID().toString();

    @Test
    public void accountValidation() throws ApiException {
      assertEquals("TEST USER", application.accountValidationExample(apiClient));
    }

    @Test
    public void createAndThenGetTransaction() throws Exception {
      String testUuid = suuid;
      UUID createdTransactionId = application.createTransactionExample(apiClient, testUuid, false);
      assertThat(createdTransactionId, instanceOf(UUID.class));
      Transaction returnedTransaction = application.getTransactionByExternalId(apiClient, testUuid).getObject().get(0);
        assertAll(
                () -> assertThat(returnedTransaction.getId(), instanceOf(UUID.class)),
                () -> assertEquals( returnedTransaction.getId(), createdTransactionId),
                () -> assertEquals(testUuid, returnedTransaction.getExternalId())
        );

    }

    @Test
    public void createAndFundB2BTransactionAndGetRecipientForThatTransaction() throws Exception {
        UUID createdTransactionId = application.createAndFundTransactionExample(apiClient, suuid, true);
        assertThat(createdTransactionId, instanceOf(UUID.class));
        Recipient returnedRecipient = application.getTransactionErrorMessageExample(apiClient, createdTransactionId);
        assertAll(
                () -> assertThat(returnedRecipient, instanceOf(Recipient.class)),
                () -> assertEquals(RecipientState.INITIAL, returnedRecipient.getState()),
                () -> assertEquals(createdTransactionId.toString(), returnedRecipient.getTransactionId())
        );
    }

    @Test
    public void createAndUpdateSender() throws Exception {
        String city = "London";
        UUID createdSenderId = application.createSender(apiClient, suuid);
        assertThat(createdSenderId, instanceOf(UUID.class));
        Sender updatedSender = application.updateSender(apiClient, createdSenderId, city).getObject();
        assertAll(
                () -> assertThat(updatedSender.getId(), instanceOf(UUID.class)),
                () -> assertEquals(createdSenderId, updatedSender.getId()),
                () -> assertEquals(city, updatedSender.getCity())
        );

    }

    @Test
    public void createAndGetSender() throws Exception {
        String testUuid = suuid;
        UUID createdSenderId = application.createSender(apiClient, testUuid);
        assertThat(createdSenderId, instanceOf(UUID.class));
        Sender returnedSender = application.getSenderByExternalId(apiClient, testUuid).getObject().get(0);
        assertAll(
                () -> assertThat(returnedSender.getId(), instanceOf(UUID.class)),
                () -> assertEquals(testUuid, returnedSender.getExternalId())
        );
    }
}
